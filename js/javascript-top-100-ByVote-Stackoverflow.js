var jsonData = [{
    "t": "How do JavaScript closures work?",
    "l": "http://stackoverflow.com/questions/111102/how-do-javascript-closures-work",
    "q": "\n\n<p>Like the old <a href=\"http://en.wikipedia.org/wiki/Albert_Einstein\">Albert Einstein</a> <a href=\"http://www.searchquotes.com/quotation/If_you_can%27t_explain_it_to_a_six_year_old,_you_don%27t_understand_it_yourself./333069/\">said</a>: </p>\n\n<blockquote>\n  <p>If you can't explain it to a six-year-old, you really don't understand it yourself.  </p>\n</blockquote>\n\n<p>Well, I tried to explain JavaScript closures to a 27-year-old friend and completely failed.</p>\n\n<p>How would you explain it to someone with a knowledge of the concepts which make up closures (for example, functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\">the Scheme example</a> given on Stack Overflow, and it did not help.</p>\n    ",
    "a": "\n<p>Whenever you see the function keyword within another function, the inner function has access to variables in the outer function.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\n  var tmp = 3;\n\n  function bar(y) {\n    alert(x + y + (++tmp)); // will alert 16\n  }\n\n  bar(10);\n}\n\nfoo(2);</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>This will always alert 16, because <code>bar</code> can access the <code>x</code> which was defined as an argument to <code>foo</code>, and it can also access <code>tmp</code> from <code>foo</code>.</p>\n\n<p>That <strong><em>is</em></strong> a closure. A function doesn't have to <em>return</em> in order to be called a closure. <strong><em>Simply accessing variables outside of your immediate lexical scope creates a closure</em></strong>.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\n  var tmp = 3;\n\n  return function (y) {\n    alert(x + y + (++tmp)); // will also alert 16\n  }\n}\n\nvar bar = foo(2); // bar is now a closure.\nbar(10);</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>The above function will also alert 16, because <code>bar</code> can still refer to <code>x</code> and <code>tmp</code>, even though it is no longer directly inside the scope.</p>\n\n<p>However, since <code>tmp</code> is still hanging around inside <code>bar</code>'s closure, it is also being incremented. It will be incremented each time you call <code>bar</code>.</p>\n\n<p>The simplest example of a closure is this:</p>\n\n<pre><code>var a = 10;\nfunction test() {\n  console.log(a); // will output 10\n  console.log(b); // will output 6\n}\nvar b = 6;\ntest();\n</code></pre>\n\n<p>When a JavaScript function is invoked, a new execution context is created. Together with the function arguments and the parent object, this execution context also receives all the variables declared outside of it (in the above example, both 'a' and 'b').</p>\n\n<p>It is possible to create more than one closure function, either by returning a list of them or by setting them to global variables. All of these will refer to the <strong>same</strong> <code>x</code> and the same <code>tmp</code>, they don't make their own copies.</p>\n\n<p>Here the number <code>x</code> is a literal number. As with other literals in JavaScript, when <code>foo</code> is called, the number <code>x</code> is <b>copied</b> into <code>foo</code> as its argument <code>x</code>.</p>\n\n<p>On the other hand, JavaScript always uses references when dealing with objects. If say, you called <code>foo</code> with an object, the closure it returns will <b>reference</b> that original object!</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\n  var tmp = 3;\n\n  return function (y) {\n    alert(x + y + tmp);\n    x.memb = x.memb ? x.memb + 1 : 1;\n    alert(x.memb);\n  }\n}\n\nvar age = new Number(2);\nvar bar = foo(age); // bar is now a closure referencing age.\nbar(10);</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>As expected, each call to <code>bar(10)</code> will increment <code>x.memb</code>. What might not be expected, is that <code>x</code> is simply referring to the same object as the <code>age</code> variable! After a couple of calls to <code>bar</code>, <code>age.memb</code> will be 2! This referencing is the basis for memory leaks with HTML objects.</p>\n    "
}, {
    "t": "How can I make a redirect page using jQuery?",
    "l": "http://stackoverflow.com/questions/503093/how-can-i-make-a-redirect-page-using-jquery",
    "q": "\n\n<p>How can I redirect the user from one page to another using jQuery?</p>\n    ",
    "a": "\n<p>jQuery is not necessary, and <strong><code>window.location.replace(...)</code></strong> will best simulate an HTTP redirect.  </p>\n\n<p>It is better than using <code>window.location.href =</code>, because <code>replace()</code> does not put the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.  If you want to simulate someone clicking on a link, use <code>location.href</code>.  If you want to simulate an HTTP redirect, use <code>location.replace</code>.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>// similar behavior as an HTTP redirect\nwindow.location.replace(\"http://stackoverflow.com\");\n\n// similar behavior as clicking on a link\nwindow.location.href = \"http://stackoverflow.com\";\n</code></pre>\n    "
}, {
    "t": "What does “use strict” do in JavaScript, and what is the reasoning behind it?",
    "l": "http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it",
    "q": "\n\n<p>Recently, I ran some of my JavaScript code through Crockford's <a href=\"http://www.jslint.com/\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n    ",
    "a": "\n<p>This article about Javascript Strict Mode might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n\n<p>To quote some interesting parts:</p>\n\n<blockquote>\n  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n  <p>Strict mode helps out in a couple ways:</p>\n  \n  <ul>\n  <li>It catches some common coding bloopers, throwing exceptions.</li>\n  <li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n  <li>It disables features that are confusing or poorly thought out.</li>\n  </ul>\n</blockquote>\n\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig's article)</em>:</p>\n\n<pre><code>// Non-strict code...\n\n(function(){\n  \"use strict\";\n\n  // Define your library strictly...\n})();\n\n// Non-strict code... \n</code></pre>\n\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n\n<p>So, I suppose it's a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n\n<p>Currently, it's <a href=\"http://caniuse.com/#use-strict\"><strong>supported by all major browsers</strong></a> <em>(bar IE 9 and below)</em>.</p>\n    "
}, {
    "t": "Checking if an element is hidden",
    "l": "http://stackoverflow.com/questions/178325/checking-if-an-element-is-hidden",
    "q": "\n\n<p>In jQuery, it is possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>.</p>\n\n<p>Using jQuery, how would you test if an element is visible or hidden?</p>\n    ",
    "a": "\n<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre><code>// Checks for display:[none|block], ignores visible:[true|false]\n$(element).is(\":visible\"); \n</code></pre>\n\n<p>Same as <a href=\"http://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt's suggestion</a>, but applied to a single element.</p>\n    "
}, {
    "t": "How can I check if one string contains another substring?",
    "l": "http://stackoverflow.com/questions/1789945/how-can-i-check-if-one-string-contains-another-substring",
    "q": "\n\n<p>How can I check if one string contains another substring in JavaScript? \nUsually I would expect a <code>String.contains()</code> method, but there doesn't seem to be one.</p>\n    ",
    "a": "\n<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/String/indexOf\"><code>indexOf</code></a> returns the position of the string in the other string. If not found, it will return -1:</p>\n\n<pre><code>var s = \"foo\";\nalert(s.indexOf(\"oo\") &gt; -1);\n</code></pre>\n    "
}, {
    "t": "var functionName = function() {} vs function functionName() {}",
    "l": "http://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname",
    "q": "\n\n<p>I've recently started maintaining someone else's JavaScript code. I'm fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer uses two ways of declaring functions and I can't work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can't be done with the other?</p>\n    ",
    "a": "\n<p>The difference is that <code>functionOne</code> is defined at run-time, whereas <code>functionTwo</code> is defined at parse-time for a script block.  For example:</p>\n\n<pre><code>&lt;script&gt;\n  // Error\n  functionOne();\n\n  var functionOne = function() {\n  };\n&lt;/script&gt;\n\n&lt;script&gt;\n  // No error\n  functionTwo();\n\n  function functionTwo() {\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>This also means you can't conditionally define functions using the second syntax:</p>\n\n<pre><code>&lt;script&gt;\n  if (test) {\n     // Error or misbehavior\n     function functionThree() { doSomething(); }\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>The above actually defines <code>functionThree</code> irrespective of <code>test</code>'s value — unless <code>use strict</code> is in effect, in which case it simply raises an error.</p>\n    "
}, {
    "t": "Does it matter which equals operator (== vs ===) I use in JavaScript comparisons?",
    "l": "http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons",
    "q": "\n\n<p>I'm using <a href=\"http://en.wikipedia.org/wiki/JSLint\">JSLint</a> to go through JavaScript, and it's returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n    ",
    "a": "\n<p>The identity (<code>===</code>) operator behaves identically to the equality (<code>==</code>) operator except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. It's this case where <code>===</code> will be faster, and may return a different result than <code>==</code>. In all other cases performance will be the same.</p>\n\n<p>To quote Douglas Crockford's excellent <a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>'' == '0'           // false\n0 == ''             // true\n0 == '0'            // true\n\nfalse == 'false'    // false\nfalse == '0'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n' \\t\\r\\n ' == 0     // true\n</code></pre>\n  \n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"http://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"http://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert's</a> <a href=\"http://stackoverflow.com/a/957602/1288\">answer</a> concerning reference types.  For reference types <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a literal with an object that evaluates to the same literal, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string literal with a string object created by the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they're not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you're trying to compare.  My advice is to bypass the question entirely and just don't use the <code>String</code> constructor to create string objects.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n    "
}, {
    "t": "How can I get query string values in JavaScript?",
    "l": "http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript",
    "q": "\n\n<p>Is there a plugin-less way of retrieving <a href=\"http://en.wikipedia.org/wiki/Query_string\">query string</a> values via jQuery (or without)? </p>\n\n<p>If so, how? If not, is there a plugin which can do so?</p>\n    ",
    "a": "\n<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>\n\n<pre><code>function getParameterByName(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"),\n        results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var prodId = getParameterByName('prodId');\n</code></pre>\n    "
}, {
    "t": "Can I comment a JSON file?",
    "l": "http://stackoverflow.com/questions/244777/can-i-comment-a-json-file",
    "q": "\n\n<p>Can I comment a JSON file? If so, how?</p>\n    ",
    "a": "\n<p>I don't believe you can have an actual comment.  The JSON should all be data, and if you include a comment, then it will be data too.</p>\n\n<p>You could have a designated data element called \"_comment\" (or something) that would be ignored by apps that use the json data.</p>\n\n<p>You would probably be better having the comment in the processes that generate/receive the json, as they are supposed to know what the json data will be in advance, or at least the structure of it. </p>\n\n<p>But if you decided to...</p>\n\n<pre><code>{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}\n</code></pre>\n    "
}, {
    "t": "Href attribute for JavaScript links: “#” or “javascript:void(0)”?",
    "l": "http://stackoverflow.com/questions/134845/href-attribute-for-javascript-links-or-javascriptvoid0",
    "q": "\n\n<p>The following are two methods of building a link that has the sole purpose of running JavaScript code. Which is better, in terms of functionality, page load speed, validation purposes, etc.?</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myJsFunc() {\n  alert(\"myJsFunc\");\n}</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;a href=\"#\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;</code></pre>\n</div>\n</div>\n<p></p>\n\n<p>or</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>  function myJsFunc() {\n    alert(\"myJsFunc\");\n  }</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code> &lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;</code></pre>\n</div>\n</div>\n<p></p>\n    ",
    "a": "\n<p>I use <code>javascript:void(0)</code>.</p>\n\n<p>Three reasons. Encouraging the use of # amongst a team of developers inevitably leads to some using the return value of the function called like this:</p>\n\n<pre><code>function doSomething() {\n    //Some code\n    return false;\n}\n</code></pre>\n\n<p>But then they forget to use <code>return doSomething()</code> in the onclick and just use <code>doSomething()</code>.</p>\n\n<p>A second reason for avoiding <code>#</code> is that the final <code>return false;</code> will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.</p>\n\n<p>A third reason is that there are cases where the <code>onclick</code> event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my <code>onclick</code> (or on anything) in HTML markup look like this:</p>\n\n<pre><code>onclick=\"someFunc.call(this)\"\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>onclick=\"someFunc.apply(this, arguments)\"\n</code></pre>\n\n<p>Using <code>javascript:void(0)</code> avoids all of the above headaches, and I haven't found any examples of a downside.</p>\n\n<p>So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:</p>\n\n<p>Use <code>href=\"#\"</code>, make sure <code>onclick</code> always contains <code>return false;</code> at the end, that any called function does not throw an error and if you attach a function dynamically to the <code>onclick</code> property make sure that as well as not throwing an error it returns <code>false</code>.</p>\n\n<p>OR</p>\n\n<p>Use <code>href=\"javascript:void(0)\"</code></p>\n\n<p>The second is clearly much easier to communicate.</p>\n    "
}, {
    "t": "What is the most efficient way to clone an object?",
    "l": "http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-an-object",
    "q": "\n\n<p>What is the most efficient way to clone a JavaScript object? I've seen <code>obj = eval(uneval(o));</code> being used, but that's currently Firefox-only. In Mootools 1.2, I've done things like <code>obj = JSON.decode(JSON.encode(o));</code> but question the efficiency.</p>\n\n<p>I've also seen recursive copying functions with various flaws. I'm surprised no canonical solution exists.</p>\n    ",
    "a": "\n<blockquote>\n  <p><strong>Note:</strong> This is a reply to another answer, not a proper response to this question. If you wish to have fast object cloning please follow <a href=\"http://stackoverflow.com/a/5344074/1438393\">Corban's advice in his answer</a> to this question.</p>\n</blockquote>\n\n<hr>\n\n<p>I want to note that the <a href=\"http://api.jquery.com/clone/\"><code>.clone()</code></a> method in <strong>jQuery</strong> only clones DOM elements. In order to clone JavaScript objects, you would do:</p>\n\n<pre><code>// Shallow copy\nvar newObject = jQuery.extend({}, oldObject);\n\n// Deep copy\nvar newObject = jQuery.extend(true, {}, oldObject);\n</code></pre>\n\n<p>More information can be found in the <a href=\"http://api.jquery.com/jQuery.extend/\">jQuery documentation</a>.</p>\n\n<p>I also want to note that the deep copy is actually much smarter than what is shown above – it's able to avoid many traps (trying to deep extend a DOM element, for example). It's used frequently in jQuery core and in plugins to great effect.</p>\n    "
}, {
    "t": "Check checkbox checked property",
    "l": "http://stackoverflow.com/questions/901712/check-checkbox-checked-property",
    "q": "\n\n<p>I need to check the <code>checked</code> property of a checkbox and perform an action based on the checked property using <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a>.</p>\n\n<p>For example, if the age checkbox is checked, then I need to show a textbox to enter age, else hide the textbox.</p>\n\n<p>But the following code returns <code>false</code> by default:</p>\n\n<pre><code>if($('#isAgeSelected').attr('checked')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>How do I successfully query the <code>checked</code> property?</p>\n    ",
    "a": "\n<p>This worked for me:</p>\n\n<pre><code>$get(\"isAgeSelected \").checked == true\n</code></pre>\n\n<p>Where <code>isAgeSelected</code> is the id of the control.</p>\n\n<p>Also, @karim79's <a href=\"http://stackoverflow.com/questions/901712/check-checkbox-checked-property-using-jquery/901727#901727\">answer</a> works fine. I am not sure what I missed at the time I tested it.</p>\n\n<p><strong>Note, this is answer uses Microsoft Ajax, not jQuery</strong></p>\n    "
}, {
    "t": "Include a JavaScript file in another JavaScript file?",
    "l": "http://stackoverflow.com/questions/950087/include-a-javascript-file-in-another-javascript-file",
    "q": "\n\n<p>Is there something similar to <code>@import</code> in CSS in JavaScript that allows you to include a JavaScript file inside another JavaScript file?</p>\n    ",
    "a": "\n<p>JavaScript has no import, include, or require. There are other ways for JavaScript to include external JavaScript contents, though.</p>\n\n<h3>Ajax Loading</h3>\n\n<p>Load an additional script with an Ajax call and then use <code>eval</code>. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs and hacks.</p>\n\n<h3>jQuery Loading</h3>\n\n<p>The <a href=\"http://jquery.com/\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\">in one line</a>:</p>\n\n<pre><code>$.getScript(\"my_lovely_script.js\", function(){\n\n   alert(\"Script loaded but not necessarily executed.\");\n\n});\n</code></pre>\n\n<h3>Dynamic Script Loading</h3>\n\n<p>Add a script tag with the script URL in the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Both of these solutions are discussed and illustrated in <em><a href=\"http://unixpapa.com/js/dyna.html\">JavaScript Madness: Dynamic Script Loading</a></em>.</p>\n\n<h2>Detecting when the script has been executed</h2>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won't be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses en event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\">lambda function</a>:</p>\n\n<pre><code>var myPrettyCode = function() {\n\n   // Here, do what ever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There's a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h3>Source Code Merge</h3>\n\n<p>Another <a href=\"http://stackoverflow.com/q/5511989/59087\">solution</a> is to combine the two files into a single file. This can be used with minification to produce a single, minimally sized JavaScript file to include as normal.</p>\n    "
}, {
    "t": "How to remove a property from a JavaScript object",
    "l": "http://stackoverflow.com/questions/208105/how-to-remove-a-property-from-a-javascript-object",
    "q": "\n\n<p>Say I create an object thusly:</p>\n\n<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n</code></pre>\n\n<p>What is the best way to remove the property 'regex' to end up with this new <code>myJSONObject</code>:</p>\n\n<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n    ",
    "a": "\n<p>Like this:</p>\n\n<pre><code>delete myJSONObject.regex;\n// or,\ndelete myJSONObject['regex'];\n// or,\nvar prop = \"regex\";\ndelete myJSONObject[prop];\n</code></pre>\n\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"http://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on his blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></em>. It is highly recommended.</p>\n    "
}, {
    "t": "How do you get a timestamp in JavaScript?",
    "l": "http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript",
    "q": "\n\n<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to Unix's timestamp, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n    ",
    "a": "\n<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"http://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It's slightly better because it's shorter &amp; doesn't create a new <code>Date</code> object. However, if you don't want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>miliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds using the same method as above.</p>\n    "
}, {
    "t": "Why does Google prepend while(1); to their JSON responses?",
    "l": "http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses",
    "q": "\n\n<p>This is something I've always been curious about, is exactly why Google prepends <code>while(1);</code> to their (private) JSON responses.</p>\n\n<p>For example, here's a response while turning a calendar on and off in Google Calendar:</p>\n\n<pre><code>while(1);[['u',[['smsSentFlag','false'],['hideInvitations','false'],\n  ['remindOnRespondedEventsOnly','true'],\n  ['hideInvitations_remindOnRespondedEventsOnly','false_true'],\n  ['Calendar ID stripped for privacy','false'],['smsVerifiedFlag','true']]]]\n</code></pre>\n\n<p>I would assume this is to prevent people from doing an <code>eval()</code> on it, but all you'd really have to do is replace the while and then you'd be set. I would assume eval prevention is to make sure people write safe JSON parsing code.</p>\n\n<p>I've seen this used in a couple other places, too, but a lot more so with Google (Mail, Calendar, Contacts, etc.) Strangely enough, Google Docs starts with <code>&amp;&amp;&amp;START&amp;&amp;&amp;</code> instead, and Google Contacts seems to start with <code>while(1); &amp;&amp;&amp;START&amp;&amp;&amp;</code>.</p>\n\n<p>Does anyone know what's going on here?</p>\n    ",
    "a": "\n<p>It prevents <a href=\"http://haacked.com/archive/2009/06/25/json-hijacking.aspx\">JSON hijacking</a>.</p>\n\n<p>Contrived example: say Google has a URL like <code>mail.google.com/json?action=inbox</code> which returns the first 50 messages of your inbox in JSON format. Evil websites on other domains can't make AJAX requests to get this data due to the same-origin policy, but they can include the URL via a <code>&lt;script&gt;</code> tag. The URL is visited with <em>your</em> cookies, and by <a href=\"http://ejohn.org/blog/re-securing-json/\">overriding the global array constructor or accessor methods</a> they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the JSON content.</p>\n\n<p>The <code>while(1);</code> or <code>&amp;&amp;&amp;BLAH&amp;&amp;&amp;</code> prevents this: an AJAX request at <code>mail.google.com</code> will have full access to the text content, and can strip it away. But a <code>&lt;script&gt;</code> tag insertion blindly executes the JavaScript without any processing, resulting in either an infinite loop or a syntax error.</p>\n\n<p>This does not address the issue of cross-site request forgery.</p>\n    "
}, {
    "t": "Remove a specific element from an array?",
    "l": "http://stackoverflow.com/questions/5767325/remove-a-specific-element-from-an-array",
    "q": "\n\n<p>I have an array of integers, which I'm using the <code>.push()</code> method to add to.</p>\n\n<p>Is there a simple way to remove a specific element from an array? The equivalent of something like <code>array.remove(int);</code></p>\n\n<p>I have to use good ol' fashioned JavaScript - no frameworks allowed.</p>\n    ",
    "a": "\n<p>First, find the <code>index</code> of the element you want to remove:</p>\n\n<pre><code>var array = [2, 5, 9];\nvar index = array.indexOf(5);\n</code></pre>\n\n<p><em>Note: <a href=\"http://kangax.github.io/es5-compat-table/#Array.prototype.indexOf\">browser support for indexOf</a> is limited</em>, it is not supported in IE7-8.</p>\n\n<p>Then remove it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a>:</p>\n\n<pre><code>if (index &gt; -1) {\n    array.splice(index, 1);\n}\n</code></pre>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note, <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n    "
}, {
    "t": "For-each over an array in JavaScript?",
    "l": "http://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript",
    "q": "\n\n<p>How can I loop through all the objects in an array using JavaScript?</p>\n\n<p>I thought of something like this (where objects is my array of objects):</p>\n\n<pre><code>forEach(instance in objects)\n</code></pre>\n\n<p>But this does not seem to be correct.</p>\n    ",
    "a": "\n<h2>For Actual Arrays</h2>\n\n<p><em>(See \"For Array-Like Objects\" below for array-like objects.)</em></p>\n\n<p>You currently have three options and will soon have two more:</p>\n\n<p>You have three options in <a href=\"http://ecma-international.org/ecma-262/5.1/\">ECMAScript&nbsp;5</a> (ES5), the current version of JavaScript; and will soon have two more in <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ECMAScript&nbsp;6</a> (ES6), the next version of JavaScript:</p>\n\n<ol>\n<li>Use <code>forEach</code> and related (ES5+)</li>\n<li>Use a simple <code>for</code> loop</li>\n<li>Use <code>for-in</code> <em>correctly</em></li>\n<li>Use <code>for-of</code> (use an iterator implicitly) (ES6+)</li>\n<li>Use an iterator explicitly (ES6+)</li>\n</ol>\n\n<p>Details:</p>\n\n<h3>1. Use <code>forEach</code> and related</h3>\n\n<p>If you're using an environment that supports the <code>Array</code> features of ES5 (directly or using a shim), you can use the new <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18\"><code>forEach</code></a> function:</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\na.forEach(function(entry) {\n    console.log(entry);\n});\n</code></pre>\n\n<p><code>forEach</code> accepts an iterator function and, optionally, a value to use as <code>this</code> when calling that iterator function (not used above). The iterator function is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the iterator function is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</p>\n\n<p>Using <code>forEach</code> on a general-purpose web page still (as of March 2014) requires that you include a \"shim\" for it for browsers that don't support it natively, because IE8 and earlier don't have it (and they're used by somewhere between 7% and 21% of the global browser users depending on who you believe; that figure is skewed a bit by markedly higher use in China vs. elsewhere, always check your own stats to see what you need to support). But shimming/polyfilling it is easily done (search for \"es5 shim\" for several options).</p>\n\n<p><code>forEach</code> has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>\n\n<p>If you're worried about the runtime cost of making a function call for each array entry, don't be; <a href=\"http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html\">details</a>.</p>\n\n<p>Additionally, <code>forEach</code> is the \"loop through them all\" function, but ES5 defined several other useful \"work your way through the array and do things\" functions, including:</p>\n\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.16\"><code>every</code></a> (stops looping the first time the iterator returns <code>false</code> or something falsey)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17\"><code>some</code></a> (stops looping the first time the iterator returns <code>true</code> or something truthy)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.20\"><code>filter</code></a> (creates a new array including elements where the filter function returns <code>true</code> and omitting the ones where it returns <code>false</code>)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.19\"><code>map</code></a> (creates a new array from the values returned by the iterator function)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21\"><code>reduce</code></a> (builds up a value by repeated calling the iterator, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.22\"><code>reduceRight</code></a> (like <code>reduce</code>, but works in descending rather than ascending order)</li>\n</ul>\n\n<h3>2. Use a simple <code>for</code> loop</h3>\n\n<p>Sometimes the old ways are the best:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0; index &lt; a.length; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <strong><em>tiny</em></strong> bit faster:</p>\n\n<pre><code>var index, len;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0, len = a.length; index &lt; len; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>And/or counting backward:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = a.length - 1; index &gt;= 0; --index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</p>\n\n<h3>3. Use <code>for-in</code> <em>correctly</em></h3>\n\n<p>You'll get people telling you to use <code>for-in</code>, but <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\">that's not what <code>for-in</code> is for</a>. <code>for-in</code> loops through the <em>enumerable properties of an object</em>, not the indexes of an array. Up through ES5, the <strong>order is not guaranteed</strong>; as of ES6, the order <strong>is</strong> guaranteed (by <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\"><code>[[OwnPropertyKeys]]</code></a>, <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\"><code>[[Enumerate]]</code></a>, and <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind-labelset\">the definition of <code>for-in</code>/<code>for-of</code></a>). (Details in <a href=\"http://stackoverflow.com/a/30864462/157247\">this other answer</a>.)</p>\n\n<p>Still, it <em>can</em> be useful, particularly for <a href=\"http://en.wikipedia.org/wiki/Sparse_array\"><em>sparse</em> arrays</a>, if you use appropriate safeguards:</p>\n\n<pre><code>// `a` is a sparse array\nvar key;\nvar a = [];\na[0] = \"a\";\na[10] = \"b\";\na[10000] = \"c\";\nfor (key in a) {\n    if (a.hasOwnProperty(key)  &amp;&amp;        // These are explained\n        /^0$|^[1-9]\\d*$/.test(key) &amp;&amp;    // and then hidden\n        key &lt;= 4294967294                // away below\n        ) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Note the two checks:</p>\n\n<ol>\n<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p></li>\n<li><p>That the key is a base-10 numeric string in its normal string form and its value is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4\">in the specification, §10.5</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array's <code>length</code> can have. (E.g., an array's length fits in a 32-bit unsigned integer.) <em>(Props to RobG for pointing out in a comment <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\">on my blog post</a> that my previous test wasn't quite right.)</em></p></li>\n</ol>\n\n<p>That's a tiny bit of added overhead per loop iteration on most arrays, but if you have a <em>sparse</em> array, it can be a more efficient way to loop because it only loops for entries that actually exist. E.g., for the array above, we loop a total of three times (for keys <code>\"0\"</code>, <code>\"10\"</code>, and <code>\"10000\"</code>&nbsp;— remember, they're strings), not 10,001 times.</p>\n\n<p>Now, you won't want to write that every time, so you might put this in your toolkit:</p>\n\n<pre><code>function arrayHasOwnIndex(array, prop) {\n    return array.hasOwnProperty(prop) &amp;&amp; /^0$|^[1-9]\\d*$/.test(prop) &amp;&amp; prop &lt;= 4294967294; // 2^32 - 2\n}\n</code></pre>\n\n<p>And then we'd use it like this:</p>\n\n<pre><code>for (key in a) {\n    if (arrayHasOwnIndex(a, key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Or if you're interested in just a \"good enough for most cases\" test, you could use this, but while it's close, it's not quite correct:</p>\n\n<pre><code>for (key in a) {\n    // \"Good enough\" for most cases\n    if (String(parseInt(key, 10)) === key &amp;&amp; a.hasOwnProperty(key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<h3>4. Use <code>for-of</code> (use an iterator implicitly) (ES6+)</h3>\n\n<p>ES6 (currently <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\">being finalized</a>) will add <em>iterators</em> to JavaScript. The easiest way to use iterators is the new <code>for-of</code> statement. It looks like this:</p>\n\n<pre><code>var val;\nvar a = [\"a\", \"b\", \"c\"];\nfor (val of a) {\n    console.log(val);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre>a\nb\nc\n</pre>\n\n<p>Under the covers, that gets an <em>iterator</em> from the array and loops through it, getting the values from it. This doesn't have the issue that using <code>for-in</code> has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their <em>entries</em> (not their properties). Unlike <code>for-in</code> in ES5, the order in which the entries are visited is the numeric order of their indexes.</p>\n\n<h3>5. Use an iterator explicitly (ES6+)</h3>\n\n<p>Sometimes, you might want to use an iterator <em>explicitly</em>. You can do that, too, although it's a lot clunkier than <code>for-of</code>. It looks like this:</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\nvar it = a.values();\nvar entry;\nwhile (!(entry = it.next()).done) {\n    console.log(entry.value);\n}\n</code></pre>\n\n<p>The iterator is a function (specifically, a <em>generator</em>) that returns a new object each time you call <code>next</code>. The object returned by the iterator has a property, <code>done</code>, telling us whether it's done, and a property <code>value</code> with the value for that iteration.</p>\n\n<p>The meaning of <code>value</code> varies depending on the iterator; arrays support (at least) three functions that return iterators:</p>\n\n<ul>\n<li><code>values()</code>: This is the one I used above. It returns an iterator where each <code>value</code> is the value for that iteration.</li>\n<li><code>keys()</code>: Returns an iterator where each <code>value</code> is the key for that iteration (so for our <code>a</code> above, that would be <code>\"0\"</code>, then <code>\"1\"</code>, then <code>\"2\"</code>).</li>\n<li><code>entries()</code>: Returns an iterator where each <code>value</code> is an array in the form <code>[key, value]</code> for that iteration.</li>\n</ul>\n\n<p>(As of this writing, Firefox 29 supports <code>entries</code> and <code>keys</code> but not <code>values</code>.)</p>\n\n<h2>For Array-Like Objects</h2>\n\n<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with numeric names: <code>NodeList</code> instances, the <code>arguments</code> object, etc. How do we loop through their contents?</p>\n\n<h3>Use any of the options above for arrays</h3>\n\n<p>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</p>\n\n<ol>\n<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>\n\n<p>The various functions on <code>Array.prototype</code> are \"intentionally generic\" and can usually be used on array-like objects via <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.4\"><code>Function#call</code></a> or <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3\"><code>Function#apply</code></a>. (See the <em>Caveat for host-provided objects</em> at the end of this answer, but it's a rare issue.)</p>\n\n<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>'s <code>childNodes</code> property. You'd do this:</p>\n\n<pre><code>Array.prototype.forEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre>\n\n<p>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>\n\n<pre><code>// (This is all presumably in some scoping function)\nvar forEach = Array.prototype.forEach;\n\n// Then later...\nforEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre></li>\n<li><p><strong>Use a simple <code>for</code> loop</strong></p>\n\n<p>Obviously, a simple <code>for</code> loop applies to array-like objects.</p></li>\n<li><p><strong>Use <code>for-in</code> <em>correctly</em></strong></p>\n\n<p><code>for-in</code> with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</p></li>\n<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES6+)</strong></p>\n\n<p><code>for-of</code> will use the iterator provided by the object (if any); we'll have to see how this plays with the various array-like objects, particularly host-provided ones.</p></li>\n<li><p><strong>Use an iterator explicitly (ES6+)</strong></p>\n\n<p>See #4, we'll have to see how iterators play out.</p></li>\n</ol>\n\n<h3>Create a true array</h3>\n\n<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy: We use the <code>slice</code> method of arrays, which like the other methods mentioned above is \"intentionally generic\" and so can be used with array-like objects, like this:</p>\n\n<pre><code>var trueArray = Array.prototype.slice.call(arrayLikeObject, 0);\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>\n\n<pre><code>var divs = Array.prototype.slice.call(document.querySelectorAll(\"div\"), 0);\n</code></pre>\n\n<p>See the <em>Caveat for host-provided objects</em> below.</p>\n\n<h3>Caveat for host-provided objects</h3>\n\n<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. <strong>Most do behave properly</strong> (now), but it's important to test. The reason is that most of the <code>Array.prototype</code> methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract <a href=\"http://en.wikipedia.org/wiki/Sparse_array\"><code>[[HasProperty]]</code></a> operation. As of this writing, browsers do a very good job of this, but the spec does allow for the possibility a host-provided object may not be honest; it's in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\">§8.6.2</a> (several paragraphs below the big table near the beginning of that section), where it says:</p>\n\n<blockquote>\n  <p>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that <code>[[Get]]</code> and <code>[[Put]]</code> for a particular host object indeed fetch and store property values but <code>[[HasProperty]]</code> always generates <strong>false</strong>.</p>\n</blockquote>\n\n<p>Again, as of this writing the common host-provided array-like objects in modern browsers (<code>NodeList</code> instances, for instance) <strong>do</strong> handle <code>[[HasProperty]]</code> correctly, but it's important to test.</p>\n    "
}, {
    "t": "Create GUID / UUID in JavaScript?",
    "l": "http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript",
    "q": "\n\n<p>I'm trying to create globally-unique identifiers in JavaScript.  I'm not sure what routines are available on all browsers, how \"random\" and seeded the built-in random number generator is, etc..</p>\n\n<p>The GUID / UUID should be at least 32 characters and should stay in the ASCII range to avoid trouble when passing them around.</p>\n    ",
    "a": "\n<p>There have been a couple attempts at this. The question is: do you want actual GUIDs, or just random numbers that <em>look</em> like GUIDs? It's easy enough to generate random numbers. From <a href=\"http://note19.com/2007/05/27/javascript-guid-generator/\">http://note19.com/2007/05/27/javascript-guid-generator/</a> (after some clean-up for clarity's sake):</p>\n\n<pre><code>function guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n    s4() + '-' + s4() + s4() + s4();\n}\n</code></pre>\n\n<p><strike>\nHowever, note in the comments that such values are not genuine GUIDs. There's no way to generate real GUIDs in Javascript, because they depend on properties of the local computer that browsers do not expose. You'll need to use OS-specific services like ActiveX: <a href=\"http://p2p.wrox.com/topicindex/20339.htm\">http://p2p.wrox.com/topicindex/20339.htm</a>\n</strike> Edit: not correct - RFC4122 allows random (\"version 4\") ids.  See other answers for specifics.</p>\n\n<p>Use:</p>\n\n<pre><code>var uuid = guid();\n</code></pre>\n    "
}, {
    "t": "event.preventDefault() vs. return false",
    "l": "http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false",
    "q": "\n\n<p>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</p>\n\n<h3>1. <code>event.preventDefault()</code></h3>\n\n<pre><code>$('a').click(function (e) {\n    // custom handling here\n    e.preventDefault();\n});\n</code></pre>\n\n<h3>2. <code>return false</code></h3>\n\n<pre><code>$('a').click(function () {\n    // custom handling here\n    return false;\n});\n</code></pre>\n\n<p>Is there any significant difference between those two methods of stopping event propagation?</p>\n\n<p>For me, <code>return false;</code> is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc. </p>\n\n<p>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use <code>preventDefault</code> instead? What's the better way?</p>\n    ",
    "a": "\n<p><code>return false</code> from <em>within a jQuery event handler</em> is effectively the same as calling both  <code>e.preventDefault</code> and <code>e.stopPropagation</code> on the passed <a href=\"http://api.jquery.com/category/events/event-object/\">jQuery.Event object.</a></p>\n\n<p><code>e.preventDefault()</code> will prevent the default event from occuring, <code>e.stopPropagation()</code> will prevent the event from bubbling up and <code>return false</code> will do both. Note that this behaviour differs from <em>normal</em> (non-jQuery) event handlers, in which, notably, <code>return false</code> <a href=\"http://jsfiddle.net/APQk6/\">does <em>not</em> stop the event from bubbling up</a>.</p>\n\n<p>Source: <a href=\"http://ejohn.org/\">John Resig</a></p>\n\n<p><a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\"><strong>Any benefit to using event.preventDefault() over \"return false\" to cancel out an href click?</strong></a></p>\n    "
}, {
    "t": "How to decide when to use Node.js?",
    "l": "http://stackoverflow.com/questions/5062614/how-to-decide-when-to-use-node-js",
    "q": "\n\n<p>I am new to this kind of stuff, but lately I've been hearing a lot about how good <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> is. Considering how much I love working with jQuery and JavaScript in general, I can't help but wonder how to decide when to use Node.js. The web application I have in mind is something like <a href=\"https://en.wikipedia.org/wiki/Bitly\">Bitly</a> - takes some content, archives it. </p>\n\n<p>From all the homework I have been doing in the last few days, I obtained the following information. Node.js </p>\n\n<ul>\n<li>is a command-line tool that can be run as a regular web server and lets one run JavaScript programs</li>\n<li>utilizes the great <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\">V8 JavaScript engine</a></li>\n<li>is very good when you need to do several things at the same time</li>\n<li>is event-based so all the wonderful <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a>-like stuff can be done on the server side</li>\n<li>lets us share code between the browser and the backend</li>\n<li>lets us talk with MySQL</li>\n</ul>\n\n<p>Some of the sources that I have come across are:</p>\n\n<ul>\n<li><a href=\"http://www.stoimen.com/blog/2010/11/16/diving-into-node-js-introduction-and-installation/\">Diving into Node.js – Introduction and Installation</a></li>\n<li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\">Understanding NodeJS</a></li>\n<li><a href=\"http://blog.osbutler.com/categories/node-by-example/?page=3\">Node by Example</a></li>\n<li><a href=\"http://dailyjs.com/2010/11/01/node-tutorial/\">Let’s Make a Web App: NodePad</a></li>\n</ul>\n\n<p>Considering that Node.js can be run almost out-of-the-box on <a href=\"http://en.wikipedia.org/wiki/Amazon_Elastic_Compute_Cloud\">Amazon's EC2</a> instances, I am trying to understand what type of problems require Node.js as opposed to any of the mighty kings out there like <a href=\"http://en.wikipedia.org/wiki/PHP\">PHP</a>, <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\">Python</a> and <a href=\"http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\">Ruby</a>. I understand that it really depends on the expertise one has on a language, but my question falls more into the general category of: When to use a particular framework and what type of problems is it particularly suited for?</p>\n    ",
    "a": "\n<p>You did a great job of summarizing what's awesome about Node.js. My feeling is that Node.js is especially suited for applications where you'd like to maintain a persistent connection from the browser back to the server. Using a technique known as <a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\">\"long-polling\"</a>, you can write an application that sends updates to the user in real time. Doing long polling on many of the web's giants, like <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\">Ruby on Rails</a> or <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\">Django</a>, would create immense load on the server, because each active client eats up one server process. This situation amounts to a <a href=\"http://en.wikipedia.org/wiki/Tarpit_%28networking%29\">tarpit</a> attack. When you use something like Node.js, the server has no need of maintaining separate threads for each open connection.  </p>\n\n<p>This means you can create a <a href=\"https://github.com/rivalslayer/node_chat\">browser-based chat application</a> in Node.js that takes almost no system resources to serve a great many clients. Any time you want to do this sort of long-polling, Node.js is a great option.  </p>\n\n<p>It's worth mentioning that Ruby and Python both have tools to do this sort of thing (<a href=\"http://rubyeventmachine.com/\">eventmachine</a> and <a href=\"https://twistedmatrix.com/trac/\">twisted</a>, respectively), but that Node.js does it exceptionally well, and from the ground up. JavaScript is exceptionally well situated to a callback-based concurrency model, and it excels here. Also, being able to serialize and deserialize with JSON native to both the client and the server is pretty nifty. </p>\n\n<p>I look forward to reading other answers here, this is a fantastic question. </p>\n\n<p>It's worth pointing out that Node.js is also great for situations in which you'll be reusing a lot of code across the client/server gap. The <a href=\"http://meteor.com\">Meteor framework</a> makes this really easy, and a lot of folks are suggesting this might be the future of web development. I can say from experience that it's a whole lot of fun to write code in Meteor, and a big part of this is spending less time thinking about how you're going to restructure your data, so the code that runs in the browser can easily manipulate it and pass it back. </p>\n\n<p>Here's an article on Pyramid and long-polling, which turns out to be very easy to set up with a little help from gevent: <a href=\"http://michael.merickel.org/2011/6/21/tictactoe-and-long-polling-with-pyramid/\"><em>TicTacToe and Long Polling with Pyramid</em></a>.</p>\n    "
}, {
    "t": "array.contains(obj) in JavaScript",
    "l": "http://stackoverflow.com/questions/237104/array-containsobj-in-javascript",
    "q": "\n\n<p>What is the most concise and efficient way to find out if a JavaScript array contains an obj?</p>\n\n<p>This is the only way I know to do it:</p>\n\n<pre><code>function contains(a, obj) {\n    for (var i = 0; i &lt; a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Is there a better and more concise way to accomplish this?</p>\n\n<p>This is very closely related to Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\">Best way to find an item in a JavaScript Array?</a></em> which addresses finding objects in an array using <code>indexOf</code>.</p>\n    ",
    "a": "\n<p>Modern browsers have <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array#indexOf</code></a>, which does exactly that; this is in the new(ish) ECMAScript 5th edition specification, but it has been in several browsers for years. Older browsers can be supported using the code listed in the \"compatibility\" section at the bottom of that page.</p>\n\n<p><a href=\"http://api.jquery.com/jquery.inarray/\">jQuery has a utility function</a> for this:</p>\n\n<pre><code>$.inArray(value, array)\n</code></pre>\n\n<p>It returns the index of a value in an array. It returns -1 if the array does not contain the value.</p>\n\n<p>jQuery has several useful <a href=\"http://docs.jquery.com/Utilities\">utility functions</a>. </p>\n\n<p>An excellent JavaScript utility library is <a href=\"http://documentcloud.github.com/underscore/\">underscore.js</a>:</p>\n\n<ul>\n<li><a href=\"http://documentcloud.github.com/underscore/#contains\"><code>_.contains(list, value)</code></a>, alias <code>_.include(list, value)</code> (underscore's contains/include  uses <a href=\"http://documentcloud.github.com/underscore/#indexOf\">indexOf</a> internally if passed a JavaScript array). </li>\n</ul>\n\n<p>Some other frameworks:</p>\n\n<ul>\n<li>Dojo Toolkit: <code>dojo.indexOf(array, value, [fromIndex, findLast])</code> <a href=\"http://dojotoolkit.org/reference-guide/dojo/indexOf.html\">documentation</a>. Dojo has a lot of utility functions, see <a href=\"http://api.dojotoolkit.org\">http://api.dojotoolkit.org</a>.</li>\n<li>Prototype: <code>array.indexOf(value)</code> <a href=\"http://api.prototypejs.org/language/Array/prototype/indexOf/\">documentation</a></li>\n<li>MooTools: <code>array.indexOf(value)</code> <a href=\"http://mootools.net/docs/core/Native/Array#Array:indexOf\">documentation</a></li>\n<li>MochiKit: <code>findValue(array, value)</code> <a href=\"http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue\">documentation</a></li>\n<li>MS Ajax: <code>array.indexOf(value)</code> <a href=\"http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx\">documentation</a></li>\n<li>Ext: <code>Ext.Array.indexOf(array, value, [from])</code> <a href=\"http://docs.sencha.com/ext-js/4-0/#/api/Ext.Array\">documentation</a></li>\n</ul>\n\n<p>Notice that some frameworks implement this as a function, while others add the function to the array prototype.</p>\n\n<h2>Languages that compile to JavaScript</h2>\n\n<p>In <a href=\"http://coffeescript.org/#try:a%20%3D%20[1%2C%202%2C%203%2C%204]%0Aalert%282%20in%20a%29\">CoffeeScript</a>, the <code>in</code> operator is the equivalent of <code>contains</code>:</p>\n\n<pre><code>a = [1, 2, 3, 4]\nalert(2 in a)\n</code></pre>\n\n<p><a href=\"http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-collections\">Dart</a>:</p>\n\n<pre><code>var mylist = [1, 2, 3];\nassert(mylist.contains(1));\nassert(mylist.indexOf(1) == 0);\n</code></pre>\n    "
}, {
    "t": "How can I upload files asynchronously?",
    "l": "http://stackoverflow.com/questions/166221/how-can-i-upload-files-asynchronously",
    "q": "\n\n<p>I would like to upload a file asynchronously with jQuery. This is my HTML:</p>\n\n<pre><code>&lt;span&gt;File&lt;/span&gt;\n&lt;input type=\"file\" id=\"file\" name=\"file\" size=\"10\"/&gt;\n&lt;input id=\"uploadbutton\" type=\"button\" value=\"Upload\"/&gt;\n</code></pre>\n\n<p>And here my JavaScript code:</p>\n\n<pre><code>$(document).ready(function () {\n    $(\"#uploadbutton\").click(function () {\n        var filename = $(\"#file\").val();\n\n        $.ajax({\n            type: \"POST\",\n            url: \"addFile.do\",\n            enctype: 'multipart/form-data',\n            data: {\n                file: filename\n            },\n            success: function () {\n                alert(\"Data Uploaded: \");\n            }\n        });\n    });\n});\n</code></pre>\n\n<p>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</p>\n\n<h3>Current Solution</h3>\n\n<p>I am using the <a href=\"http://malsup.com/jquery/form/#code-samples\">jQuery Form Plugin</a> to upload files.</p>\n    ",
    "a": "\n<p>With <a href=\"http://en.wikipedia.org/wiki/HTML5\">HTML5</a> you CAN make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME-type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use <a href=\"http://en.wikipedia.org/wiki/Adobe_Flash\">Flash</a> nor Iframes or plugins and after some research I came up with the solution.</p>\n\n<p>The HTML:</p>\n\n<pre><code>&lt;form enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n&lt;progress&gt;&lt;/progress&gt;\n</code></pre>\n\n<p>First, you can do some validation if you want. For example, in the onChange event of the file:</p>\n\n<pre><code>$(':file').change(function(){\n    var file = this.files[0];\n    var name = file.name;\n    var size = file.size;\n    var type = file.type;\n    //Your validation\n});\n</code></pre>\n\n<p>Now the Ajax submit with the button's click:</p>\n\n<pre><code>$(':button').click(function(){\n    var formData = new FormData($('form')[0]);\n    $.ajax({\n        url: 'upload.php',  //Server script to process data\n        type: 'POST',\n        xhr: function() {  // Custom XMLHttpRequest\n            var myXhr = $.ajaxSettings.xhr();\n            if(myXhr.upload){ // Check if upload property exists\n                myXhr.upload.addEventListener('progress',progressHandlingFunction, false); // For handling the progress of the upload\n            }\n            return myXhr;\n        },\n        //Ajax events\n        beforeSend: beforeSendHandler,\n        success: completeHandler,\n        error: errorHandler,\n        // Form data\n        data: formData,\n        //Options to tell jQuery not to process data or worry about content-type.\n        cache: false,\n        contentType: false,\n        processData: false\n    });\n});\n</code></pre>\n\n<p>Now if you want to handle the progress.</p>\n\n<pre><code>function progressHandlingFunction(e){\n    if(e.lengthComputable){\n        $('progress').attr({value:e.loaded,max:e.total});\n    }\n}\n</code></pre>\n\n<p>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Google Chrome</a> as some of the HTML5 components of the examples aren't available in every browser.</p>\n    "
}, {
    "t": "What is the difference between call and apply?",
    "l": "http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply",
    "q": "\n\n<p>What is the difference between using call and apply to invoke a function?</p>\n\n<pre><code>var func = function(){\n  alert('hello!');\n};\n</code></pre>\n\n<p><code>func.apply();</code></p>\n\n<p>vs</p>\n\n<pre><code>func.call();\n</code></pre>\n\n<p>Are there performance differences between the two methods? When is it best to use call over apply and vice versa?</p>\n    ",
    "a": "\n<p>The difference is that <code>apply</code> lets you invoke the function with arguments as an array; <code>call</code> requires the parameters be listed explicitly. A useful mnemonic is \"A for array and C for comma.\"</p>\n\n<p>See <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">here</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\">here</a>.</p>\n\n<p>Pseudo syntax:</p>\n\n<p><code>theFunction.apply(valueForThis, arrayOfArgs)</code></p>\n\n<p><code>theFunction.call(valueForThis, arg1, arg2, ...)</code></p>\n\n<p>Sample code:</p>\n\n<pre><code>function theFunction(name, profession) {\n    alert(\"My name is \" + name + \" and I am a \" + profession + \".\");\n}\ntheFunction(\"John\", \"fireman\");\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\n</code></pre>\n    "
}, {
    "t": "Validate decimal numbers in JavaScript - IsNumeric()",
    "l": "http://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric",
    "q": "\n\n<p>What's the cleanest, most effective way to validate decimal numbers in JavaScript?</p>\n\n<p>Bonus points for:</p>\n\n<ol>\n<li>Clarity. Solution should be clean and simple.</li>\n<li>Cross-platform.</li>\n</ol>\n\n<p>Test cases:</p>\n\n<pre><code> 01. IsNumeric('-1') =&gt; true\n 02. IsNumeric('-1.5') =&gt; true\n 03. IsNumeric('0') =&gt; true\n 04. IsNumeric('0.42') =&gt; true\n 05. IsNumeric('.42') =&gt; true\n 06. IsNumeric('99,999') =&gt; false\n 07. IsNumeric('0x89f') =&gt; false\n 08. IsNumeric('#abcdef')=&gt; false\n 09. IsNumeric('1.2.3') =&gt; false\n 10. IsNumeric('') =&gt; false\n 11. IsNumeric('blah') =&gt; false\n</code></pre>\n    ",
    "a": "\n<p><a href=\"http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/174921#174921\">@Joel's answer</a> is pretty close, but it will fail in the following cases:</p>\n\n<pre><code>// Whitespace strings:\nIsNumeric(' ') == true;\nIsNumeric('\\t\\t') == true;\nIsNumeric('\\n\\r') == true;\n\n// Number literals:\nIsNumeric(-1) == false;\nIsNumeric(0) == false;\nIsNumeric(1.1) == false;\nIsNumeric(8e5) == false;\n</code></pre>\n\n<p>Some time ago I had to implement an <code>IsNumeric</code> function, to find out if a variable contained a numeric value, <strong>regardless its type</strong>, it could be a <code>String</code> containing a numeric value (I had to consider also exponential notation, etc.), a <code>Number</code> object, virtually anything could be passed to that function, I couldn't make any type assumption,  taking care of type coercion (eg. <code>+true == 1;</code> but <code>true</code> shouldn't be considered as <code>\"numeric\"</code>).</p>\n\n<p>I think is worth sharing this set of <a href=\"http://run.plnkr.co/plunks/93FPpacuIcXqqKMecLdk/\"><strong>+30 unit tests</strong></a> (<a href=\"http://dl.getdropbox.com/u/35146/js/tests/isNumber.html\">old link</a>) made to numerous function implementations, and also share the one that passes all my tests:</p>\n\n<pre><code>function isNumeric(n) {\n  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\n}\n</code></pre>\n\n<p><strong>Update</strong> : \n<a href=\"https://github.com/jquery/jquery/blob/c869a1ef8a031342e817a2c063179a787ff57239/src/core.js#L214\">Here's how jQuery does it now (Mid-2014)</a> : </p>\n\n<pre><code>isNumeric: function( obj ) {\n    return !jQuery.isArray( obj ) &amp;&amp; (obj - parseFloat( obj ) + 1) &gt;= 0;\n}\n</code></pre>\n\n<p><strong>P.S.</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN</a> &amp; <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite</a> have a confusing behavior due to forced conversion to number. In ES6, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\">Number.isNaN</a> &amp; <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\">Number.isFinite</a> would fix these issues. Keep that in mind when using them. </p>\n    "
}, {
    "t": "$(this) selector and children?",
    "l": "http://stackoverflow.com/questions/306583/this-selector-and-children",
    "q": "\n\n<p>I have a layout similar to this:</p>\n\n<pre><code>&lt;div id=\"...\"&gt;&lt;img src=\"...\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and would like to use a jQuery selector to select the child <code>img</code> inside the <code>div</code> on click.</p>\n\n<p>To get the <code>div</code>, I've got this selector:</p>\n\n<pre><code>$(this)\n</code></pre>\n\n<p>How can I get the child <code>img</code> using a selector?</p>\n    ",
    "a": "\n<p>The jQuery constructor accepts a 2nd parameter called <a href=\"http://api.jquery.com/jQuery/#jQuery-selector-context\"><code>context</code></a> which can be used to override the context of the selection. </p>\n\n<pre><code>jQuery(\"img\", this);\n</code></pre>\n\n<p>Which is the same as using <a href=\"http://api.jquery.com/find\"><code>.find()</code></a> like this:</p>\n\n<pre><code>jQuery(this).find(\"img\");\n</code></pre>\n\n<p>If the imgs you desire are <strong>only</strong> direct descendants of the clicked element, you can also use <a href=\"http://api.jquery.com/children\"><code>.children()</code></a>:</p>\n\n<pre><code>jQuery(this).children(\"img\");\n</code></pre>\n    "
}, {
    "t": "Detecting an undefined object property",
    "l": "http://stackoverflow.com/questions/27509/detecting-an-undefined-object-property",
    "q": "\n\n<p>What's the best way of checking if an object property in JavaScript is undefined?</p>\n    ",
    "a": "\n<p>Use:</p>\n\n<pre><code>if (typeof something === \"undefined\") {\n    alert(\"something is undefined\");\n}\n</code></pre>\n\n<p>If an object variable which have some properties you can use same thing like this:</p>\n\n<pre><code>if (typeof my_obj.someproperties === \"undefined\"){\n    console.log('the property is not available...'); // print into console\n}\n</code></pre>\n    "
}, {
    "t": "Validate email address in JavaScript?",
    "l": "http://stackoverflow.com/questions/46155/validate-email-address-in-javascript",
    "q": "\n\n<p>How can an email address be validated in JavaScript?</p>\n    ",
    "a": "\n<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a> is probably the best way. Here's an example (<a href=\"http://jsbin.com/ozeyag/19\">live demo</a>):</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n    return re.test(email);\n}\n</code></pre>\n\n<p>Here's the example of regular expresion that accepts unicode:</p>\n\n<pre><code>var re = /^(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can  easily be disabled. This should be validated on the server side as well.</p>\n    "
}, {
    "t": "Capitalize the first letter of string in JavaScript",
    "l": "http://stackoverflow.com/questions/1026069/capitalize-the-first-letter-of-string-in-javascript",
    "q": "\n\n<p>How do I capitalize the first character of a string, but not change the case of any of the other letters?</p>\n\n<p>For example:</p>\n\n<ul>\n<li>this is a test -&gt; This is a test</li>\n<li>the Eiffel Tower -&gt; The Eiffel Tower</li>\n<li>/index.html -&gt; /index.html</li>\n</ul>\n    ",
    "a": "\n<p>Another solution:</p>\n\n<pre><code>function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n</code></pre>\n\n<p>You could also add it to the <code>String.prototype</code> so you could chain it with other methods:</p>\n\n<pre><code>String.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>and use it like this:</p>\n\n<pre><code>'string'.capitalizeFirstLetter() // String\n</code></pre>\n    "
}, {
    "t": "Encode URL in JavaScript?",
    "l": "http://stackoverflow.com/questions/332872/encode-url-in-javascript",
    "q": "\n\n<p>How do you safely encode a URL using JavaScript such that it can be put into a GET string?</p>\n\n<pre><code>var myUrl = \"http://example.com/index.html?param=1&amp;anotherParam=2\";\nvar myOtherUrl = \"http://example.com/index.html?url=\" + myUrl;\n</code></pre>\n\n<p>I assume that you need to encode the <code>myUrl</code> variable on that second line?</p>\n    ",
    "a": "\n<p>Check out the built-in function <code>encodeURIComponent(str)</code> and <code>encodeURI(str)</code>.<br>\nIn your case, this should work:</p>\n\n<pre><code>var myOtherUrl = \n       \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n    "
}, {
    "t": "How do I copy to the clipboard in JavaScript?",
    "l": "http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript",
    "q": "\n\n<p>What is the best way to copy text to the clipboard? (multi-browser)</p>\n\n<p>I have tried: </p>\n\n<pre><code>function copyToClipboard(text) {\n    if (window.clipboardData) { // Internet Explorer\n        window.clipboardData.setData(\"Text\", text);\n    } else {  \n        unsafeWindow.netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\");  \n        const clipboardHelper = Components.classes[\"@mozilla.org/widget/clipboardhelper;1\"].getService(Components.interfaces.nsIClipboardHelper);  \n        clipboardHelper.copyString(text);\n    }\n}\n</code></pre>\n\n<p>but in Internet Explorer it gives a syntax error. In Firefox, it says <code>unsafeWindow is not defined</code>.</p>\n\n<p><strong>Edit</strong> A nice trick without flash: <a href=\"http://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard\">How does Trello access the user's clipboard?</a></p>\n    ",
    "a": "\n<p>Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:</p>\n\n<pre><code>function copyToClipboard(text) {\n  window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n}\n</code></pre>\n\n<p>The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press <kbd>Ctrl</kbd>+<kbd>C</kbd> and <kbd>Enter</kbd> (to close the box) -- and voila!</p>\n\n<p>Now the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.</p>\n    "
}, {
    "t": "Is it possible to apply CSS to half of a character?",
    "l": "http://stackoverflow.com/questions/23569441/is-it-possible-to-apply-css-to-half-of-a-character",
    "q": "\n\n<p><strong>What I am looking for:</strong></p>\n\n<p>A way to style one <strong>HALF</strong> of a character. (In this case, half the letter being transparent)</p>\n\n<p><strong>What I have currently searched for and tried (With no luck):</strong></p>\n\n<ul>\n<li>Methods for styling half of a character/letter</li>\n<li>Styling part of a character with CSS or JavaScript</li>\n<li>Apply CSS to 50% of a character</li>\n</ul>\n\n<p>Below is an example of what I am trying to obtain.</p>\n\n<p><img src=\"http://i.stack.imgur.com/SaH8v.png\" alt=\"x\"></p>\n\n<p>Does a CSS or JavaScript solution exists for this or am I going to have to resort to images? I would prefer not to go the image route as this text will end up being generated dynamically.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>Since many have asked why I would ever want to style half of a character, this is why. My city had recently spent $250,000 to define a new \"brand\" for itself. This <strong><a href=\"http://halifaxdefined.ca/img/halifax_logo_new.png\">LOGO</a></strong> is what they came up with. Many people have complained about the simplicity and lack of creativity and continue to do so. My goal was to come up with this <strong><a href=\"http://gameovercancer.ca/tests/brandgenerator/\">WEBSITE</a></strong> as a joke. Type in 'Halifax' and you will see what I mean. :)</p>\n    ",
    "a": "\n<h1><a href=\"https://github.com/arbelh/HalfStyle\">Now on GitHub as a Plugin!</a></h1>\n\n<p><img src=\"http://i.stack.imgur.com/Glo2Q.png\" alt=\"enter image description here\"> Feel free to fork and improve.</p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/820/\">Demo</a> | <a href=\"https://github.com/arbelh/HalfStyle/archive/master.zip\">Download Zip</a> | <a href=\"http://www.half-style.com\">Half-Style.com</a> (Redirects to GitHub)</h1>\n\n<hr>\n\n<ul>\n<li><strong>Pure CSS</strong> for a Single Character</li>\n<li>JavaScript used for automation accross text or multiple characters</li>\n<li>Preserves Text Accessibility for screen readers for the blind or visually\nimpaired</li>\n</ul>\n\n<h1>Part1: Basic Solution</h1>\n\n<p><img src=\"http://i.stack.imgur.com/ZYic1.png\" alt=\"Half Style on text\"></p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/817/\">http://jsfiddle.net/pd9yB/817/</a></p>\n\n<hr>\n\n<p>This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.</p>\n\n<p>Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.</p>\n\n<p><strong>Explanation for a single character:</strong></p>\n\n<p>Pure CSS. All you need to do is to apply <code>.halfStyle</code> class to each element that contains the character you want to be half-styled.</p>\n\n<p>For each span element containing the character, you can create a data attribute, for example here <code>data-content=\"X\"</code>, and on the pseudo element use <code>content: attr(data-content);</code> so the <code>.halfStyle:before</code> class will be dynamic and you won't need to hard code it for every instance.</p>\n\n<p><strong>Explanation for any text:</strong></p>\n\n<p>Simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<hr>\n\n<p><strong>CSS:</strong></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: black; /* or transparent, any color */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    left:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: #f00;\n}\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;p&gt;Single Characters:&lt;/p&gt;\n&lt;span class=\"halfStyle\" data-content=\"X\"&gt;X&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Y\"&gt;Y&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Z\"&gt;Z&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"A\"&gt;A&lt;/span&gt;\n\n&lt;hr/&gt;\n&lt;p&gt;Automated:&lt;/p&gt;\n\n&lt;span class=\"textToHalfStyle\"&gt;Half-style, please.&lt;/span&gt;\n</code></pre>\n\n<hr>\n\n<p>To make it automated, simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<p><strong>jQuery</strong> for automated mode:</p>\n\n<pre><code>jQuery(function($) {\n    var text, chars, $el, i, output;\n\n    // Iterate over all class occurences\n    $('.textToHalfStyle').each(function(idx, el) {\n        $el = $(el);\n        text = $el.text();\n        chars = text.split('');\n\n        // Set the screen-reader text\n        $el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        output = '';\n\n        // Iterate over all chars in the text\n        for (i = 0; i &lt; chars.length; i++) {\n            // Create a styled element for each character and append to container\n            output += '&lt;span aria-hidden=\"true\" class=\"halfStyle\" data-content=\"' + chars[i] + '\"&gt;' + chars[i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $el.append(output);\n    });\n});\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/819/\">http://jsfiddle.net/pd9yB/819/</a></p>\n\n<hr>\n\n<h1>Part2: Advanced solution - Independent left and right parts</h1>\n\n<p><img src=\"http://i.stack.imgur.com/zYa0F.png\" alt=\"Half Style on text - advanced\"></p>\n\n<p><strong><em>With this solution you can style left and right parts, individually and independently</em></strong>.</p>\n\n<p>Everything is the same, only more advanced CSS does the magic.</p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/819/\">http://jsfiddle.net/pd9yB/819/</a></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the left part */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the right part */\n    display:block;\n    direction: rtl; /* very important, will make the width to start from right */\n    position:absolute;\n    z-index:2;\n    top:0;\n    left:50%;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<p></p><hr>\n<hr><p></p>\n\n<h1>Part3: Mix-Match and Improve</h1>\n\n<p>Now that we know what is possible, let's create some variations.</p>\n\n<hr>\n\n<h2>-Horizontal Half Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/2eDaQ.png\" alt=\"halfStyle - Horizontal Half Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/821/\">Demo</a></h1>\n\n<pre><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the top part */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the bottom part */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 100%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<hr>\n\n<hr>\n\n<h2>-Vertical 1/3 Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/ypn4X.png\" alt=\"halfStyle - Vertical 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/850/\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the right 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the left 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    width: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr>\n\n<hr>\n\n<h2>-Horizontal 1/3 Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/UeuxW.png\" alt=\"halfStyle - Horizontal 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/823/\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr>\n\n<hr>\n\n<h2>-HalfStyle Improvement By @KevinGranger</h2>\n\n<p><img src=\"http://i.stack.imgur.com/PgdJ6.png\" alt=\"halfStyle - KevinGranger\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/824/\">DEMO</a></h1>\n\n<pre><code>body{\n    background-color: black;\n}\n\n.textToHalfStyle{\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n</code></pre>\n\n<p></p><hr>\n<hr><p></p>\n\n<h2>-PeelingStyle improvement of HalfStyle by @SamTremaine</h2>\n\n<p><img src=\"http://i.stack.imgur.com/r67KC.png\" alt=\"halfStyle - SamTremaine\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/826/\">Demo</a> and on <a href=\"http://experimental.samtremaine.co.uk/half-style/\">samtremaine.co.uk</a></h1>\n\n<pre><code>.halfStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n</code></pre>\n\n<p></p><hr>\n<hr><p></p>\n\n<h1>Part4: Ready for Production</h1>\n\n<p>Customized different Half-Style style-sets can be used on desired elements on the same page.\nYou can define multiple style-sets and tell the plugin which one to use.</p>\n\n<p>The plugin uses data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code> on the target <code>.textToHalfStyle</code> elements and makes all the necessary changes automatically.</p>\n\n<p>So, simply on the element containing the text add <code>textToHalfStyle</code> class and data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code>. The plugin will do the rest of the job.</p>\n\n<p><img src=\"http://i.stack.imgur.com/RxjKF.png\" alt=\"halfStyle - Multiple on Same Page\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/787/\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n\n<pre><code>jQuery(function($) {\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n    // Iterate over all class occurrences\n    $('.textToHalfStyle').each(function(idx, halfstyle_el) {\n        $halfstyle_el = $(halfstyle_el);\n        halfstyle_style = $halfstyle_el.data('halfstyle');\n        halfstyle_text = $halfstyle_el.text();\n        halfstyle_chars = halfstyle_text.split('');\n\n        // Set the screen-reader text\n        $halfstyle_el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + halfstyle_text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        halfstyle_output = '';\n\n        // Iterate over all chars in the text\n        for (halfstyle_i = 0; halfstyle_i &lt; halfstyle_chars.length; halfstyle_i++) {\n            // Create a styled element for each character and append to container\n            halfstyle_output += '&lt;span aria-hidden=\"true\" class=\"halfStyle ' + halfstyle_style + '\" data-content=\"' + halfstyle_chars[halfstyle_i] + '\"&gt;' + halfstyle_chars[halfstyle_i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $halfstyle_el.append(halfstyle_output);\n    });\n});\n</code></pre>\n\n<p>Also the CSS style-sets' class definitions match the <code>[-CustomClassName-]</code> part mentioned above and is chained to <code>.halfStyle</code>, so we will have <code>.halfStyle.[-CustomClassName-]</code></p>\n\n<pre><code> /* start half-style hs-base */\n .halfStyle.hs-base {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #000; /* for demo purposes */\n}\n.halfStyle.hs-base:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    pointer-events: none; /* so the base char is selectable by mouse */\n    overflow:hidden;\n    color: #f00; /* for demo purposes */\n}\n /* end half-style hs-base */\n\n/* start half-style hs-horizontal-third */\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n/* end half-style hs-horizontal-third */\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n.halfStyle.hs-PeelingStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n/* end half-style hs-PeelingStyle */\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n.textToHalfStyle.hs-KevinGranger {\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle.hs-KevinGranger {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle.hs-KevinGranger:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n/* end half-style hs-KevinGranger\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-base\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-horizontal-third\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-PeelingStyle\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p style=\"background-color:#000;\"&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-KevinGranger\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/787/\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n    "
}, {
    "t": "How do I get started with Node.js",
    "l": "http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js",
    "q": "\n\n<p>Are there any good resources to get started with Node.JS? Any good tutorials, blogs or books?</p>\n\n<p>Of course, I have visited its official website <a href=\"http://nodejs.org/\">http://nodejs.org/</a>, but I didn't think the documentation they have is a good starting point.</p>\n    ",
    "a": "\n<p><strong>Tutorials</strong></p>\n\n<ul>\n<li><a href=\"http://nodeschool.io/\">NodeSchool.io interactive lessons</a></li>\n<li><a href=\"https://github.com/maxogden/art-of-node/#the-art-of-node\">The Art of Node (an introduction to Node)</a></li>\n<li><a href=\"http://node.blog.com/2014/12/29/hello-world-with-node-and-express/\">Hello World Example</a></li>\n<li><a href=\"http://www.nodebeginner.org/#hello-world\">Hello World</a></li>\n<li><a href=\"http://www.nodebeginner.org/#building-the-application-stack\">Hello World Web Server</a></li>\n<li><a href=\"http://nodeguide.com/\">Node.js guide</a></li>\n<li><a href=\"http://howtonode.org/express-mongodb\">Build a blog with Node.js, express and MongoDB</a></li>\n<li><a href=\"http://project70.com/\">Node.Js Tutorials At Project 70</a></li>\n<li><a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/\">Node.js for Beginners</a></li>\n<li><a href=\"http://javascriptissexy.com/learn-node-js-completely-and-with-confidence/\">Learn Node.js Completely and with Confidence</a></li>\n<li><a href=\"http://blog.modulus.io/absolute-beginners-guide-to-nodejs\">Absolute Beginners Guide To Node.js</a></li>\n</ul>\n\n<p><strong>Developer Sites</strong></p>\n\n<ul>\n<li><a href=\"http://www.joyent.com/developers/node\">Joyent's developer site for node</a></li>\n</ul>\n\n<p><strong>Videos</strong></p>\n\n<ul>\n<li><a href=\"http://nodetuts.com/\">Node tuts</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=jo_B4LTHi3I\">Introduction to Node.js with Ryan Dahl</a></li>\n<li><a href=\"http://www.infoq.com/presentations/nodejs\">Node.js: Asynchronous Purity Leads to Faster Development</a></li>\n<li><a href=\"http://www.infoq.com/presentations/Parallel-Programming-with-Nodejs\">Parallel Programming with Node.js</a></li>\n<li><a href=\"http://vimeo.com/18077379\">Server-side JavaScript with Node, Connect &amp; Express</a></li>\n<li><a href=\"http://www.lynda.com/Nodejs-tutorials/Nodejs-First-Look/101554-2.html\">Node.js First Look</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=0_GNHWZHc-o\">Node.js with MongoDB</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=F6k8lTrAE2g\">Ryan Dahl's Google Tech Talk</a></li>\n<li><a href=\"http://node.codeschool.com/levels/1\">Real Time Web with Node.js</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL6gx4Cwl9DGBMdkKFn3HasZnnAqVjzHn_\">Node.js Tutorials for Beginners</a></li>\n<li><a href=\"http://www.pluralsight.com/search/?searchTerm=Node.js\">Pluralsight courses (paid)</a></li>\n</ul>\n\n<p><strong>Screencasts</strong></p>\n\n<ul>\n<li><a href=\"http://learnallthenodes.com\">Learn All The Nodes</a></li>\n<li><a href=\"http://nodetuts.com/\">NodeTuts</a></li>\n<li><a href=\"http://nodecasts.net/\">NodeCasts</a></li>\n<li><a href=\"http://www.develop.com/webcasts/watch/5318c4d5d588bf08c461f4b1/create-server-side-mvc-apps-with-node-js-and-express\">Create server-side MVC apps with Node.js and Express</a></li>\n</ul>\n\n<p><strong>Books</strong></p>\n\n<ul>\n<li><a href=\"http://nodebeginner.org/\">The Node Beginner Book</a></li>\n<li><a href=\"https://github.com/tj/masteringnode\">Mastering Node.js</a></li>\n<li><a href=\"http://chimera.labs.oreilly.com/books/1234000001808/index.html\">Up and Running with Node.js</a></li>\n<li><a href=\"http://www.manning.com/cantelon/\">Node.js in Action</a></li>\n<li><a href=\"http://amzn.com/B008Z5OEUY\">Smashing Node.js: JavaScript Everywhere</a></li>\n<li><a href=\"http://www.amazon.de/dp/389864829X\">Node.js &amp; Co. (in German)</a></li>\n<li><a href=\"http://nodejsbook.io/\">Sam's Teach Yourself Node.js in 24 Hours</a></li>\n<li><a href=\"http://jsbooks.revolunet.com/\">Most detailed list of free JavaScript Books</a></li>\n<li><a href=\"http://book.mixu.net/node/index.html\">Mixu's Node Book</a></li>\n<li><a href=\"http://pragprog.com/book/jwnode/node-js-the-right-way\">Node.js the Right Way: Practical, Server-Side JavaScript That Scale</a></li>\n<li><a href=\"https://leanpub.com/webdevelopmentwithnodejs\">Beginning Web Development with Node.js</a></li>\n<li><a href=\"http://www.packtpub.com/node-javascript-web-development/book\">Node Web Development</a></li>\n<li><a href=\"http://nicholasjohnson.com/courses/nodejs/book\">NodeJS for Righteous Universal Domination!</a></li>\n</ul>\n\n<p><strong>Courses</strong></p>\n\n<ul>\n<li><a href=\"http://node.codeschool.com/\">Real Time Web with Node.js</a></li>\n<li><a href=\"http://www.develop.com/training-course/nodejs-featuring-node-npm-express-mocha-mongodb-with-mongoose\">Essential Node.js from DevelopMentor</a></li>\n</ul>\n\n<p><strong>Blogs</strong></p>\n\n<ul>\n<li><a href=\"http://blog.nodejs.org/\">The Node.js blog</a></li>\n<li><a href=\"http://howtonode.org/\">How To Node</a></li>\n<li><a href=\"http://dailyjs.com/\">DailyJS</a></li>\n<li><a href=\"http://blog.nodejitsu.com/\">Nodejitsu blog</a></li>\n<li><a href=\"http://www.wilcoxd.com/whitepapers/node_js/\">Ryan Wilcox's Whitepaper</a></li>\n<li><a href=\"http://www.devthought.com/\">devthought</a></li>\n</ul>\n\n<p><strong>Podcasts</strong></p>\n\n<ul>\n<li><a href=\"http://nodeup.com/\">NodeUp</a></li>\n</ul>\n\n<p><strong>JavaScript resources</strong></p>\n\n<ul>\n<li><a href=\"http://yuiblog.com/crockford/\">Crockford's videos</a> (must see!)</li>\n<li><a href=\"http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/\">Essential JavaScript Design Patterns For Beginners</a></li>\n<li><a href=\"http://bonsaiden.github.com/JavaScript-Garden/\">JavaScript garden</a></li>\n<li><a href=\"http://oreilly.com/catalog/9780596806767\">JavaScript Patterns</a> book</li>\n<li><a href=\"http://oreilly.com/catalog/9780596517748/\">JavaScript: The Good Parts</a> book</li>\n</ul>\n\n<p><strong>Node.js Modules</strong></p>\n\n<ul>\n<li><a href=\"http://npmjs.org/\">Search for registered Node.js modules</a></li>\n<li><a href=\"https://github.com/joyent/node/wiki/modules\">Wiki List on GitHub/Joyent/Node.js</a> (start here last!)</li>\n<li><a href=\"http://www.freshblurbs.com/articles/important-node-js-modules.html\">A completely biased and incomplete selection of useful Node.js modules</a></li>\n</ul>\n\n<p><strong>Other</strong></p>\n\n<ul>\n<li><a href=\"http://jsapp.us/\">JSApp.US - like jsfiddle, but for Node.js</a></li>\n<li><a href=\"https://www.ebayopensource.org/index.php/VJET/NodeJS\">Node with VJET JS (for Eclipse IDE)</a></li>\n<li>Production sites with published source: \n\n<ul>\n<li><a href=\"http://nodeknockout.com/\">Node Knockout Hackathon</a> <a href=\"https://github.com/nko3/website\">(source)</a></li>\n</ul></li>\n<li><a href=\"http://coding.smashingmagazine.com/2011/09/16/useful-node-js-tools-tutorials-and-resources/\">Useful Node.js Tools, Tutorials and Resources</a></li>\n<li><a href=\"http://runnable.com/\">Runnable.com - like jsfiddle, but for server side as well</a></li>\n<li><a href=\"https://devcenter.heroku.com/categories/nodejs\">Getting Started with Node.js on Heroku</a></li>\n<li><a href=\"https://blog.openshift.com/run-your-nodejs-projects-on-openshift-in-two-simple-steps/\">Getting Started with Node.js on Open-Shift</a></li>\n<li><a href=\"http://passportjs.org/guide/\">Authentication using Passport</a></li>\n</ul>\n    "
}, {
    "t": "Get current URL in web browser",
    "l": "http://stackoverflow.com/questions/1034621/get-current-url-in-web-browser",
    "q": "\n\n<p>How do I get the website URL?</p>\n\n<p>Not the URL as taken from a link. On the loading page, I want to get the full, current URL of the current web page and store its value in a variable.</p>\n    ",
    "a": "\n<p>Use:</p>\n\n<pre><code>window.location.href \n</code></pre>\n\n<p>As noted in the comments, the line below works but is bugged for Firefox.</p>\n\n<pre><code>document.URL;\n</code></pre>\n\n<p>See <em><a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-46183437\">URL of type DOMString, readonly</a></em>.</p>\n    "
}, {
    "t": "Add table row in jQuery",
    "l": "http://stackoverflow.com/questions/171027/add-table-row-in-jquery",
    "q": "\n\n<p>What is the best method in jQuery to add an additional row to a table as the last row?</p>\n\n<p><strong>Update</strong></p>\n\n<p>Is this acceptable:</p>\n\n<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>Are there limitations to what you can add to a table like this (such as inputs, selects, number of rows)?</p>\n    ",
    "a": "\n<p>The approach you suggest is not guaranteed to give you the result you're looking for - what if you had a <code>tbody</code> for example:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>You would end up with the following:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tr&gt;...&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>I would therefore recommend this approach instead:</p>\n\n<pre><code>$('#myTable tr:last').after('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n\n<p>You can include anything within the <code>after()</code> method as long as it's valid HTML, including multiple rows as per the example above.</p>\n\n<p><strong>Update:</strong> Revisiting this answer following recent activity with this question. eyelidlessness makes a good comment that there will always be a <code>tbody</code> in the DOM; this is true, but only if there is at least one row. If you have no rows, there will be no <code>tbody</code> unless you have specified one yourself.</p>\n\n<p>DaRKoN_ <a href=\"http://stackoverflow.com/questions/171027/jquery-add-table-row/468240#468240\">suggests</a> appending to the <code>tbody</code> rather than adding content after the last <code>tr</code>. This gets around the issue of having no rows, but still isn't bulletproof as you could theoretically have multiple <code>tbody</code> elements and the row would get added to each of them.</p>\n\n<p>Weighing everything up, I'm not sure there is a single one-line solution that accounts for every single possible scenario. You will need to make sure the jQuery code tallies with your markup.</p>\n\n<p>I think the safest solution is probably to ensure your <code>table</code> always includes at least one <code>tbody</code> in your markup, even if it has no rows. On this basis, you can use the following which will work however many rows you have (and also account for multiple <code>tbody</code> elements):</p>\n\n<pre><code>$('#myTable &gt; tbody:last-child').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n    "
}, {
    "t": "Appending to array",
    "l": "http://stackoverflow.com/questions/351409/appending-to-array",
    "q": "\n\n<p>How do I append to an array in JavaScript?</p>\n    ",
    "a": "\n<p>Use the <code>push()</code> function to append to an array:</p>\n\n<pre><code>// initialize array\nvar arr = [\n    \"Hi\",\n    \"Hello\",\n    \"Bonjour\"\n];\n\n// append new value to the array\narr.push(\"Hola\");\n\n// display all values\nfor (var i = 0; i &lt; arr.length; i++) {\n    console.log(arr[i]);\n}\n</code></pre>\n\n<p>Will print:</p>\n\n<pre><code>Hi\nHello\nBonjour\nHola \n</code></pre>\n    "
}, {
    "t": ".prop() vs .attr()",
    "l": "http://stackoverflow.com/questions/5874652/prop-vs-attr",
    "q": "\n\n<p>So <a href=\"http://api.jquery.com/category/version/1.6/\">jQuery 1.6</a> has the new function <a href=\"http://api.jquery.com/prop/\"><code>prop()</code></a>.</p>\n\n<pre><code>$(selector).click(function(){\n    //instead of:\n    this.getAttribute('style');\n    //do i use:\n    $(this).prop('style');\n    //or:\n    $(this).attr('style');\n})\n</code></pre>\n\n<p>or in this case do they do the same thing?</p>\n\n<p>And if I <em>do</em> have to switch to using <code>prop()</code>, all the old <code>attr()</code> calls will break if i switch to 1.6?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>See this fiddle: <a href=\"http://jsfiddle.net/maniator/JpUF2/\">http://jsfiddle.net/maniator/JpUF2/</a></p>\n\n<p>The console logs the <code>getAttribute</code> as a string, and the <code>attr</code> as a string, but the <code>prop</code> as a <code>CSSStyleDeclaration</code>, Why? And how does that affect my coding in the future?</p>\n    ",
    "a": "\n<p><strong>Update 1 November 2012</strong></p>\n\n<p>My original answer applies specifically to jQuery 1.6. My advice remains the same but jQuery 1.6.1 changed things slightly: in the face of the predicted pile of broken websites, the jQuery team <a href=\"http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/\">reverted <code>attr()</code> to something close to (but not exactly the same as) its old behaviour for Boolean attributes</a>. John Resig also <a href=\"http://ejohn.org/blog/jquery-16-and-attr/\">blogged about it</a>. I can see the difficulty they were in but still disagree with his recommendation to prefer <code>attr()</code>.</p>\n\n<p><strong>Original answer</strong></p>\n\n<p>If you've only ever used jQuery and not the DOM directly, this could be a confusing change, although it is definitely an improvement conceptually. Not so good for the bazillions of sites using jQuery that will break as a result of this change though.</p>\n\n<p>I'll summarize the main issues:</p>\n\n<ul>\n<li>You usually want <code>prop()</code> rather than <code>attr()</code>.</li>\n<li>In the majority of cases, <code>prop()</code> does what <code>attr()</code> used to do. Replacing calls to <code>attr()</code> with <code>prop()</code> in your code will generally work.</li>\n<li>Properties are generally simpler to deal with than attributes. An attribute value may only be a string whereas a property can be of any type. For example, the <code>checked</code> property is a Boolean, the <code>style</code> property is an object with individual properties for each style, the <code>size</code> property is a number.</li>\n<li>Where both a property and an attribute with the same name exists, usually updating one will update the other, but this is not the case for certain attributes of inputs, such as <code>value</code> and <code>checked</code>: for these attributes, the property always represents the current state while the attribute (except in old versions of IE) corresponds to the default value/checkedness of the input (reflected in the <code>defaultValue</code> / <code>defaultChecked</code> property).</li>\n<li>This change removes some of the layer of magic jQuery stuck in front of attributes and properties, meaning jQuery developers will have to learn a bit about the difference between properties and attributes. This is a good thing.</li>\n</ul>\n\n<p>If you're a jQuery developer and are confused by this whole business about properties and attributes, you need to take a step back and learn a little about it, since jQuery is no longer trying so hard to shield you from this stuff. For the authoritative but somewhat dry word on the subject, there's the specs: <a href=\"http://www.w3.org/TR/dom/\">DOM4</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/\">HTML DOM</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-Core\">DOM Level 2</a>, <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/\">DOM Level 3</a>. Mozilla's DOM documentation is valid for most modern browsers and is easier to read than the specs, so you may find their <a href=\"https://developer.mozilla.org/en/gecko_dom_reference\">DOM reference</a> helpful. There's a <a href=\"https://developer.mozilla.org/en/DOM/element#Properties\">section on element properties</a>.</p>\n\n<p>As an example of how properties are simpler to deal with than attributes, consider a checkbox that is initially checked. Here are two possible pieces of valid HTML to do this:</p>\n\n<pre><code>&lt;input id=\"cb\" type=\"checkbox\" checked&gt;\n&lt;input id=\"cb\" type=\"checkbox\" checked=\"checked\"&gt;\n</code></pre>\n\n<p>So, how do you find out if the checkbox is checked with jQuery? Look on Stack Overflow and you'll commonly find the following suggestions:</p>\n\n<ul>\n<li><code>if ( $(\"#cb\").attr(\"checked\") === true ) {...}</code></li>\n<li><code>if ( $(\"#cb\").attr(\"checked\") == \"checked\" ) {...}</code></li>\n<li><code>if ( $(\"#cb\").is(\":checked\") ) {...}</code></li>\n</ul>\n\n<p>This is actually the simplest thing in the world to do with the <code>checked</code> Boolean property, which has existed and worked flawlessly in every major scriptable browser since 1995:</p>\n\n<p><code>if (document.getElementById(\"cb\").checked) {...}</code></p>\n\n<p>The property also makes checking or unchecking the checkbox trivial:</p>\n\n<p><code>document.getElementById(\"cb\").checked = false</code></p>\n\n<p>In jQuery 1.6, this unambiguously becomes</p>\n\n<p><code>$(\"#cb\").prop(\"checked\", false)</code></p>\n\n<p>The idea of using the <code>checked</code> attribute for scripting a checkbox is unhelpful and unnecessary. The property is what you need.</p>\n\n<ul>\n<li>It's not obvious what the correct way to check or uncheck the checkbox is using the <code>checked</code> attribute</li>\n<li>The attribute value reflects the default rather than the current visible state (except in some older versions of IE, thus making things still harder). The attribute tells you nothing about the whether the checkbox on the page is checked. See <a href=\"http://jsfiddle.net/VktA6/49/\">http://jsfiddle.net/VktA6/49/</a>.</li>\n</ul>\n    "
}, {
    "t": "How does JavaScript .prototype work?",
    "l": "http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work",
    "q": "\n\n<p>I'm not that into dynamic programming languages but I've written my fair share of JavaScript code. I never really got my head around this prototype-based programming, does any one know how this works? </p>\n\n<pre><code>var obj = new Object();\nobj.prototype.test = function() { alert('Hello?'); };\nvar obj2 = new obj();\nobj2.test();\n</code></pre>\n\n<p>I remember a lot discussion I had with people a while back (I'm not exactly sure what I'm doing) but as I understand it, there's no concept of a class. It's just an object, and instances of those objects are clones of the original, right?</p>\n\n<p>But what is the exact purpose of this \".prototype\" property in JavaScript? How does it relate to instantiating objects?</p>\n\n<h3>Update: correct way</h3>\n\n<pre><code>var obj = new Object(); // not a functional object\nobj.prototype.test = function() { alert('Hello?'); }; // this is wrong!\n\nfunction MyObject() {} // a first class functional object\nMyObject.prototype.test = function() { alert('OK'); } // OK\n</code></pre>\n\n<p>Also these <a href=\"http://ejohn.org/apps/learn/#64\" rel=\"nofollow\">slides</a> really helped a lot.</p>\n    ",
    "a": "\n<p>Every JavaScript object has an internal property called <em>[[Prototype]]</em>. If you look up a property via <code>obj.propName</code> or <code>obj['propName']</code> and the object does not have such a property - which can be checked via <code>obj.hasOwnProperty('propName')</code> - the runtime looks up the property in the object referenced by [[Prototype]] instead. If the prototype-object also doesn't have such a property, its prototype is checked in turn, thus walking the original object's <em>prototype-chain</em> until a match is found or its end is reached.</p>\n\n<p>Some JavaScript implementations allow direct access to the [[Prototype]] property, eg via a non-standard property named <code>__proto__</code>. In general, it's only possible to set an object's prototype during object creation: If you create a new object via <code>new Func()</code>, the object's [[Prototype]] property will be set to the object referenced by <code>Func.prototype</code>.</p>\n\n<p>This allows to simulate classes in JavaScript, although JavaScript's inheritance system is - as we have seen - prototypical, and not class-based:</p>\n\n<p>Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance. In class-based systems, methods are implemented the same way for each instance, so methods are normally added to the prototype, whereas an object's fields are instance-specific and therefore added to the object itself during construction.</p>\n    "
}, {
    "t": "How to return the response from an asynchronous call?",
    "l": "http://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-asynchronous-call",
    "q": "\n\n<p>I have a function <code>foo</code> which makes an Ajax request. How can I return the response from <code>foo</code>? </p>\n\n<p>I tried to return the value from the <code>success</code> callback as well as assigning the response to a local variable inside the function and return that one, but none of those ways actually return the response.</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result = response;\n            // return response; // &lt;- tried that one as well\n        }\n    });\n\n    return result;\n}\n\nvar result = foo(); // always ends up being `undefined`.\n</code></pre>\n    ",
    "a": "\n<blockquote>\n  <p><em><code>-&gt;</code> For a more general explanation of async behavior with different examples, please see</em> <a href=\"http://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a>  </p>\n  \n  <p><em><code>-&gt;</code> If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n\n<h1>Explanation of the problem</h1>\n\n<p>The <strong>A</strong> in AJAX stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer: </p>\n\n<h2>Synchronous</h2>\n\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer you needed.</p>\n\n<p>The same is happening when you make a function call containing \"normal\" code:</p>\n\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n// do something with item\ndoSomethingElse();\n</code></pre>\n\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n\n<h2>Asynchronous</h2>\n\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n\n<p>That's exactly what's happening when you do an AJAX request. </p>\n\n<pre><code>findItem(function(item) {\n    // do something with item\n});\ndoSomethingElse();\n</code></pre>\n\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the AJAX call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n\n<hr>\n\n<h1>Solution(s)</h1>\n\n<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it's generally discouraged to use them, especially in a browser context.</p>\n\n<p>Why is it bad do you ask?</p>\n\n<p>JavaScript runs in the UI thread of the browser and any long running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not. \nAll of this is really bad user experience. The user won't be able to tell whether everything is working fine or not.  Furthermore the effect will be worse for users with a slow connection.</p>\n\n<h2>Restructure code</h2>\n\n<h3>Let functions accept callbacks</h3>\n\n<p>The better approach is to organize your code properly around callbacks. In the example in the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n\n<pre><code>var result = foo();\n// code that depends on 'result'\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>foo(function(result) {\n    // code that depends on 'result'\n});\n</code></pre>\n\n<p>Here we pass a function as argument to <code>foo</code>. You can pass any function reference, for example:</p>\n\n<pre><code>function myCallback(result) {\n    // code that depends on 'result'\n}\n\nfoo(myCallback);\n</code></pre>\n\n<p><code>foo</code> itself is defined as follows:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we simply pass it on to <code>success</code>. I.e. once the AJAX request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n\n<p>You can also process the response before passing it to the callback:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // e.g. filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n\n<p>It's easier to write code using callbacks than it seems. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the AJAX response is nothing else but an event.<br>\nDifficulties could arise when you have to work with third party code, but most problems can be solved by just thinking through the application flow.</p>\n\n<h3>Use promises</h3>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise API</a> is a new feature of ECMAScript 6, but it has good browser support already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. <a href=\"https://github.com/petkaantonov/bluebird\">bluebird</a>).</p>\n\n<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is cancelled (<em>rejected</em>), it notifies all of its \"listeners\" who want to access this value.</p>\n\n<p>The advantage over plain callbacks is that they allow you do decouple your code and they are easier to compose.</p>\n\n<p>Here is a simple example of using a promise:</p>\n\n<pre><code>function delay() {\n  // `foo` returns a promise\n  return new Promise(function(resolve, reject) {\n    // only `foo` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // after 3s, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay().then(function(v) { // `foo` returns a promise\n  console.log(v); // log the value once it is resolved\n}).catch(function(v) {\n  // or do something else if it is rejected \n  // (would not happen in this example, since `reject` is not called\n});\n</code></pre>\n\n<p>Applied to our Ajax call we could use promises like this:</p>\n\n<pre><code>function foo(url) {\n  return Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\nfoo(\"/echo/json\").then(function(result) {\n  // code depending on result\n}).catch(function() {\n  // an error occurred\n});\n</code></pre>\n\n<p>Describing all the advantages that promises offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n\n<p>More information about promises: <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">HTML5 rocks - JavaScript Promises</a></p>\n\n<h3>jQuery: Use deferred objects</h3>\n\n<p><a href=\"http://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are jQuery's custom implementation ofpPromises (before the Promise API was standardized). They behave almost like promises, but expose a slightly different API.</p>\n\n<p>Every AJAX method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:</p>\n\n<pre><code>function foo() {\n    return $.ajax(...);\n}\n\nfoo().done(function(result) {\n    // code depending on result\n}).fail(function() {\n    // an error occurred\n});\n</code></pre>\n\n<p><strong>Promise gotchas</strong></p>\n\n<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example suppose you had the following:</p>\n\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: '/password',\n        data: {\n            username: $('#username').val()\n            password: $('#password').val()\n        },\n        type: 'POST',\n        dataType: 'json'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they're logged in\n}\n</code></pre>\n\n<p>This code misunderstands the above asynchrony issues. Specifically, <code>$.ajax()</code> doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n\n<p>But the fix is easy:</p>\n\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they're logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n\n<p>So now we're still calling the '/password' page on the server, but our code now properly handles the wait time for the server to respond. The <code>$.ajax()</code> call still returns immediately with a jQuery Ajax Deferred object, but we use it to attach event listeners to <code>.done()</code> and <code>.fail()</code>. In the <code>.done()</code> call, where the server responded with a normal response (HTTP 200), we check the object returned by the server. In this example the server is just returning true if the login was successful, false if not, so <code>if (r)</code> is checking for true/false.</p>\n\n<p>In the <code>.fail()</code> handler we're dealing with something going wrong - for example if the user lost their internet connection while they were typing in their username and password, or if your server went down.</p>\n\n<hr>\n\n<h3>Not recommended: Synchronous \"AJAX\" calls</h3>\n\n<p>As I mentioned, some asynchronous operations have synchronous counterparts. While I don't advocate there use, for completeness, here is how you would perform a synchronous call:</p>\n\n<h3>Without jQuery</h3>\n\n<p>If you directly use a <a href=\"http://www.w3.org/TR/XMLHttpRequest/\"><code>XMLHTTPRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-open%28%29-method\"><code>.open</code></a>.</p>\n\n<h3>jQuery</h3>\n\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\">jqXHR object</a>:</p>\n\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n\n<p>If you use any other jQuery AJAX method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"http://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n    "
}, {
    "t": "Change an element's class with JavaScript",
    "l": "http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript",
    "q": "\n\n<p>How can I change a class of an HTML element in response to an <code>onClick</code> event using JavaScript?</p>\n    ",
    "a": "\n<h2>Adding and Removing Classes, with simple cross-browser JavaScript</h2>\n\n<p>The standard JavaScript way to select an element is using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.getElementById\"><code>document.getElementById(\"Id\")</code></a>, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use <code>this</code> instead - however, going into detail on this is beyond the scope of the answer.</p>\n\n<h3>To change all classes for an element:</h3>\n\n<p>To replace all existing classes with one or more new classes, set the className attribute:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = \"MyClass\";\n</code></pre>\n\n<p>(You can use a space-delimited list to apply multiple classes.)</p>\n\n<h3>To add an additional class to an element:</h3>\n\n<p>To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className += \" MyClass\";\n</code></pre>\n\n<h3>To remove a class from an element:</h3>\n\n<p>To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className =\n   document.getElementById(\"MyElement\").className.replace\n      ( /(?:^|\\s)MyClass(?!\\S)/g , '' )\n/* code wrapped for readability - above is all one statement */\n</code></pre>\n\n<p>An explanation of this regex is as follows:</p>\n\n<pre><code>(?:^|\\s) # match the start of the string, or any single whitespace character\n\nMyClass  # the literal text for the classname to remove\n\n(?!\\S)   # negative lookahead to verify the above is the whole classname\n         # ensures there is no non-space character following\n         # (i.e. must be end of string or a space)\n</code></pre>\n\n<p>The <code>g</code> flag tells the replace to repeat as required, in case the class name has been added multiple times.</p>\n\n<h3>To check if a class is already applied to an element:</h3>\n\n<p>The same regex used above for removing a class can also be used as a check as to whether a particular class exists:</p>\n\n<pre><code>if ( document.getElementById(\"MyElement\").className.match(/(?:^|\\s)MyClass(?!\\S)/) )\n</code></pre>\n\n<p><br></p>\n\n<h3>Assigning these actions to onclick events:</h3>\n\n<p>Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as <code>onclick=\"this.className+=' MyClass'\"</code>) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JS interaction logic.</p>\n\n<p>The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // code examples from above\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass()\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p><sub><em>(It is not required to have this code in script tags, this is simply for brevity of example, and including the JS in a distinct file may be more appropriate.)</em></sub></p>\n\n<p>The second step is to move the onclick event out of the HTML and into JavaScript, for example using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\">addEventListener</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // code examples from above\n    }\n\n    window.onload = function()\n    {\n        document.getElementById(\"MyElement\").addEventListener( 'click' , changeClass );\n    }\n&lt;/script&gt;\n...\n&lt;button id=\"MyElement\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>(Note that the window.onload part is required so that the contents of that function are executed <em>after</em> the HTML has finished loading - without this, the MyElement might not exist when the JS is called, so that line would fail.)</p>\n\n<p><br></p>\n\n<h2>JavaScript Frameworks and Libraries</h2>\n\n<p>The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.</p>\n\n<p>Whilst some people consider it overkill to add a ~50KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.</p>\n\n<p><em>(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)</em></p>\n\n<p>The examples above have been reproduced below using <a href=\"http://jquery.com\">jQuery</a>, probably the most commonly used JavaScript library (though there are others worth investigating too).</p>\n\n<p>(Note that <code>$</code> here is the jQuery object.)</p>\n\n<h3>Changing Classes with jQuery:</h3>\n\n<pre><code>$('#MyElement').addClass('MyClass');\n\n$('#MyElement').removeClass('MyClass');\n\nif ( $('#MyElement').hasClass('MyClass') )\n</code></pre>\n\n<p>In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:</p>\n\n<pre><code>$('#MyElement').toggleClass('MyClass');\n</code></pre>\n\n<p><br></p>\n\n<h3>Assigning a function to a click event with jQuery:</h3>\n\n<pre><code>$('#MyElement').click(changeClass);\n</code></pre>\n\n<p>or, without needing an id:</p>\n\n<pre><code>$(':button:contains(My Button)').click(changeClass);\n</code></pre>\n\n<p><br></p>\n\n<h2>HTML5 Techniques for changing classes</h2>\n\n<p>Modern browsers have added <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\"><strong>classList</strong></a> which provides methods to make it easier to manipulate classes without needing a library:</p>\n\n<pre><code>document.getElementById(\"MyElement\").classList.add('class');\n\ndocument.getElementById(\"MyElement\").classList.remove('class');\n\nif ( document.getElementById(\"MyElement\").classList.contains('class') )\n\ndocument.getElementById(\"MyElement\").classList.toggle('class');\n</code></pre>\n\n<p>Unfortunately, these do not work in Internet Explorer prior to v10, though there is a <a href=\"http://en.wikipedia.org/wiki/Shim_%28computing%29\">shim</a> to add support for it to IE8 and IE9, available from <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\">this page</a>.</p>\n    "
}, {
    "t": "How to empty an array in JavaScript?",
    "l": "http://stackoverflow.com/questions/1232040/how-to-empty-an-array-in-javascript",
    "q": "\n\n<p>Is there a way to empty an array and if so possibly with <code>.remove()</code>?</p>\n\n<p>For instance, </p>\n\n<pre><code>A = [1,2,3,4];\n</code></pre>\n\n<p>How can I empty that?</p>\n    ",
    "a": "\n<p>This has been a hot topic and the cause of a lot of controversy. There are actually many correct answers and because this answer has been marked as the accepted answer for a very long time, I will include all of the methods here. If you vote for this answer, please upvote the other answers that I have referenced as well. <em>(most of the comments on this answer are about method 1, which was my original answer)</em></p>\n\n<hr>\n\n<p>Ways to clear an existing array <code>A</code>:</p>\n\n<p><strong>Method 1</strong></p>\n\n<p>(this was my original answer to the question)</p>\n\n<pre><code>A = [];\n</code></pre>\n\n<p>This code will set the variable <code>A</code> to a new empty array. This is perfect if you don't have <strong>references to the original array <code>A</code></strong> anywhere else because this actually creates a brand new (empty) array. You should be careful with this method because if you have referenced this array from another variable or property, the original array will remain unchanged. Only use this if you only reference the array by its original variable <code>A</code>.</p>\n\n<p>This is also the fastest solution.</p>\n\n<p><strong>Method 2</strong> (as <a href=\"http://stackoverflow.com/a/1234337/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/2214/matthew-crumley\">Matthew Crumley</a>)</p>\n\n<pre><code>A.length = 0\n</code></pre>\n\n<p>This will clear the existing array by setting its length to 0. Some have argued that this may not work in all implementations of Javascript but it turns out that this is not the case. It also works when using \"strict mode\" in Ecmascript 5 because the length property of an array is a read/write property.</p>\n\n<p><strong>Method 3</strong> (as <a href=\"http://stackoverflow.com/a/8134354/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/1047275/anthony\">Anthony</a>)</p>\n\n<pre><code>A.splice(0,A.length)\n</code></pre>\n\n<p>Using <code>.splice()</code> will work perfectly, but since <code>.splice()</code> function will return an array with all the removed items, it will actually return a copy of the original array. Benchmarks suggests that this has no effect on performance whatsoever.</p>\n\n<p><strong>Method 4</strong> (as <a href=\"http://stackoverflow.com/a/17306971/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/990356/tanguy-k\">tanguy_k</a>)</p>\n\n<pre><code>while(A.length &gt; 0) {\n    A.pop();\n}\n</code></pre>\n\n<p>This solution is not very succinct and it is also the slowest solution, contrary to earlier benchmarks referenced in the original answer.</p>\n\n<p><strong>Performance</strong></p>\n\n<p>Of all the methods of clearing an <strong><em>existing array</em></strong>, methods 2 and 3 are very similar in performance and are a lot faster than method 4. See this <a href=\"http://jsperf.com/array-destroy/151\">benchmark</a>.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>As pointed out by <a href=\"http://stackoverflow.com/users/47401/diadistis\">Diadistis</a> in his <a href=\"http://stackoverflow.com/a/28548360/113570\">answer</a> below, the original benchmarks that were used to determine the performance of the four methods described above were flawed. The original benchmark reused the cleared array so the 2nd iteration was clearing an array that was already empty.</p>\n\n<p>The following benchmark fixes this flaw: <a href=\"http://jsperf.com/array-destroy/151\">http://jsperf.com/array-destroy/151</a> . It clearly shows that methods #2 (length property) and #3 (splice) are the fastest (not counting method #1 which doesn't change the original array).</p>\n    "
}, {
    "t": "What is JSONP all about?",
    "l": "http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about",
    "q": "\n\n<p>I understand JSON, but not JSONP. <a href=\"http://en.wikipedia.org/wiki/JSON\">Wikipedia's document on JSON</a> is (was) the top search result for JSONP. It says this:</p>\n\n<blockquote>\n  <p>JSONP or \"JSON with padding\" is a JSON extension wherein a prefix is specified as an input argument of the call itself.</p>\n</blockquote>\n\n<p>Huh? What call? That doesn't make any sense to me. JSON is a data format. There's no call.</p>\n\n<p>The <a href=\"http://remysharp.com/2007/10/08/what-is-jsonp/\">2nd search result</a> is from some guy named <a href=\"http://stackoverflow.com/users/22617/remy-sharp\">Remy</a>, who writes this about JSONP:</p>\n\n<blockquote>\n  <p>JSONP is script tag injection, passing the response from the server in to a user specified function.</p>\n</blockquote>\n\n<p>I can sort of understand that, but it's still not making any sense.</p>\n\n<hr>\n\n<p>So what is JSONP? Why was it created (what problem does it solve)? And why would I use it? </p>\n\n<hr>\n\n<p><strong>Addendum</strong>: I've just created <a href=\"http://en.wikipedia.org/wiki/JSONP\">a new page for JSONP</a> on Wikipedia; it now has a clear and thorough description of JSONP, based on <a href=\"http://stackoverflow.com/users/25330/jvenema\">jvenema</a>'s answer.</p>\n    ",
    "a": "\n<p>It's actually not too complicated...</p>\n\n<p>Say you're on domain example.com, and you want to make a request to domain example.net. To do so, you need to cross domain boundaries, a no-no in most of browserland. </p>\n\n<p>The one item that bypasses this limitation is &lt;script&gt; tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really DO anything with the results, the script just gets evaluated.</p>\n\n<p>Enter JSONP. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle. </p>\n\n<p>For example, say the server expects a parameter called \"callback\" to enable its JSONP capabilities. Then your request would look like:</p>\n\n<pre><code>http://www.example.net/sample.aspx?callback=mycallback\n</code></pre>\n\n<p>Without JSONP, this might return some basic JavaScript object, like so:</p>\n\n<pre><code>{ foo: 'bar' }\n</code></pre>\n\n<p>However, with JSONP, when the server receives the \"callback\" parameter, it wraps up the result a little differently, returning something like this:</p>\n\n<pre><code>mycallback({ foo: 'bar' });\n</code></pre>\n\n<p>As you can see, it will now invoke the method you specified. So, in your page, you define the callback function:</p>\n\n<pre><code>mycallback = function(data){\n  alert(data.foo);\n};\n</code></pre>\n\n<p>And now, when the script is loaded, it'll be evaluated, and your function will be executed. Voila, cross-domain requests!</p>\n\n<p>It's also worth noting the one major issue with JSONP: you lose a lot of control of the request. For example, there is no \"nice\" way to get proper failure codes back. As a result, you end up using timers to monitor the request, etc, which is always a bit suspect. The proposition for <a href=\"http://www.json.org/JSONRequest.html\">JSONRequest</a> is a great solution to allowing cross domain scripting, maintaining security, and allowing proper control of the request.</p>\n\n<p>Edit: These days, <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">CORS</a> is the recommeded approach vs. JSONRequest. JSONP is still useful for older browser support, but given the security implications, unless you have no choice CORS is the better choice.</p>\n    "
}, {
    "t": "How does Facebook disable the browser's integrated Developer Tools?",
    "l": "http://stackoverflow.com/questions/21692646/how-does-facebook-disable-the-browsers-integrated-developer-tools",
    "q": "\n\n<p>So apparently because of the recent scams, the developer tools is exploited by people to post spam and even used to \"hack\" accounts. Facebook has blocked the developer tools, and I can't even use the console.</p>\n\n<p><img src=\"http://i.stack.imgur.com/Wiatp.png\" alt=\"Enter image description here\"></p>\n\n<p>How did they do that?? <a href=\"http://stackoverflow.com/questions/7559409/disable-developer-tools\">One Stack Overflow post claimed that it is not possible</a>, but Facebook has proven them wrong.</p>\n\n<p>Just go to Facebook and open up the developer tools, type one character into the console, and this warning pops up. No matter what you put in, it will not get executed.</p>\n\n<p>How is this possible?</p>\n\n<p>They even blocked auto-complete in the console:</p>\n\n<p><img src=\"http://i.stack.imgur.com/j0Zmx.png\" alt=\"Enter image description here\"></p>\n    ",
    "a": "\n<p>I'm a security engineer at Facebook and this is my fault. We're testing this for some users to see if it can slow down some attacks where users are tricked into pasting (malicious) JavaScript code into the browser console.</p>\n\n<p>Just to be clear: trying to block hackers client-side is a <a href=\"http://stackoverflow.com/questions/7559409/disable-developer-tools\">bad idea</a> in general;\nthis is to protect against a <a href=\"https://www.facebook.com/photo.php?v=956977232793\">specific social engineering attack</a>.</p>\n\n<p>If you ended up in the test group and are annoyed by this, sorry. I tried to\nmake <a href=\"https://www.facebook.com/selfxss\">the opt-out page</a> as simple as\npossible while still being scary enough to stop at least <em>some</em> of the\nvictims.</p>\n\n<p>The actual code is pretty similar to <a href=\"http://stackoverflow.com/a/21692733\">@joeldixon66's link</a>; ours is a little more complicated for no good reason.</p>\n\n<p>Chrome wraps all console code in</p>\n\n<pre><code>with ((console &amp;&amp; console._commandLineAPI) || {}) {\n  &lt;code goes here&gt;\n}\n</code></pre>\n\n<p>... so the site redefines <code>console._commandLineAPI</code> to throw:</p>\n\n<pre><code>Object.defineProperty(console, '_commandLineAPI',\n   { get : function() { throw 'Nooo!' } })\n</code></pre>\n\n<p>This is <a href=\"http://escape.alf.nu/20\">not quite enough (try it!)</a>, but that's the\nmain trick.</p>\n\n<hr>\n\n<p>Epilogue: The Chrome team decided that defeating the console from user-side JS was a bug and <a href=\"https://code.google.com/p/chromium/issues/detail?id=349993\">fixed the issue</a>, rendering this technique invalid. Afterwards, additional protection was added to <a href=\"https://code.google.com/p/chromium/issues/detail?id=345205#c21\">protect users from self-xss</a>. </p>\n    "
}, {
    "t": "Get selected text from drop-down list (select box) using jQuery",
    "l": "http://stackoverflow.com/questions/1643227/get-selected-text-from-drop-down-list-select-box-using-jquery",
    "q": "\n\n<p>How can I get an <a href=\"http://en.wikipedia.org/wiki/Active_Server_Pages\">ASP</a> drop-down list selected text in jQuery, not using the selected value?</p>\n    ",
    "a": "\n<pre><code>$(\"#yourdropdownid option:selected\").text();\n</code></pre>\n    "
}, {
    "t": "How do you check for an empty string in JavaScript?",
    "l": "http://stackoverflow.com/questions/154059/how-do-you-check-for-an-empty-string-in-javascript",
    "q": "\n\n<p>I saw this <a href=\"http://stackoverflow.com/questions/10230/checking-for-string-contents-string-length-vs-empty-string\">thread</a>, but I didn't see a JavaScript specific example. Is there a simple <code>string.Empty</code> available in JavaScript, or is it just a case of checking for <code>\"\"</code>?</p>\n    ",
    "a": "\n<p>If you just want to check whether there's any value, you can do </p>\n\n<pre><code>if (strValue) {\n    //do something\n}\n</code></pre>\n\n<p>If you need to check specifically for an empty string over null, I would think checking against <code>\"\"</code> is your best bet, using <a href=\"http://www.webreference.com/js/column26/stricteq.html\">the <code>===</code> operator</a> (so that you know that it is, in fact, a string you're comparing against).</p>\n    "
}, {
    "t": "Loop through array in JavaScript",
    "l": "http://stackoverflow.com/questions/3010840/loop-through-array-in-javascript",
    "q": "\n\n<p>In Java you can use a <code>for()</code> loop to go through objects in an array like so:</p>\n\n<pre><code>String[] myStringArray = {\"Hello\",\"World\"};\nfor(String s : myStringArray)\n{\n    //Do something\n}\n</code></pre>\n\n<p>Can you do the same in JavaScript?</p>\n    ",
    "a": "\n<p>Use a sequential <code>for</code> loop:</p>\n\n<pre><code>var myStringArray = [\"Hello\",\"World\"];\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i &lt; arrayLength; i++) {\n    alert(myStringArray[i]);\n    //Do something\n}\n</code></pre>\n\n<p>@zipcodeman suggests the use of the <code>for...in</code> statement, but for iterating arrays <code>for-in</code> should be avoided, that statement is meant to <strong>enumerate</strong> object properties.</p>\n\n<p>It shouldn't be used for array-like objects because:</p>\n\n<ul>\n<li>The order of iteration is not guaranteed, the array indexes may not be visited in numeric order.</li>\n<li>Inherited properties are also enumerated.</li>\n</ul>\n\n<p>The second point is that it can give you a lot of problems, for example, if you extend the <code>Array.prototype</code> object to include a method there, that property will be also enumerated.</p>\n\n<p>For example:</p>\n\n<pre><code>Array.prototype.foo = \"foo!\";\nvar array = ['a', 'b', 'c'];\n\nfor (var i in array) {\n  alert(array[i]);\n}\n</code></pre>\n\n<p>The above code will alert, \"a\", \"b\", \"c\" and \"foo!\".</p>\n\n<p>That be particularly a problem if you use some library that relies heavily on native prototypes augmention (such as MooTools for example).</p>\n\n<p>The <code>for-in</code> statement as I said before is there to <em>enumerate</em> object properties, for example:</p>\n\n<pre><code>var obj = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n};\n\nfor (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) { \n  // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...\n    alert(\"prop: \" + prop + \" value: \" + obj[prop])\n  }\n}\n</code></pre>\n\n<p>In the above example the <code>hasOwnProperty</code> method allows you to enumerate only <em>own properties</em>, that's it, only the properties that the object physically has, no inherited properties.</p>\n\n<p>I would recommend you to read the following article:</p>\n\n<ul>\n<li><a href=\"http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;date=2007/10/21/&amp;entry=Iteration-Enumeration-Primitives-and-Objects\">Enumeration VS Iteration</a></li>\n</ul>\n    "
}, {
    "t": "Storing Objects in HTML5 localStorage",
    "l": "http://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage",
    "q": "\n\n<p>I'd like to store a JavaScript object in HTML5 <code>localStorage</code>, but my object is apparently being converted to a string.</p>\n\n<p>I can store and retrieve primitive JavaScript types and arrays using <code>localStorage</code>, but objects don't seem to work.  Should they? </p>\n\n<p>Here's my code:</p>\n\n<pre><code>var testObject = { 'one': 1, 'two': 2, 'three': 3 };\nconsole.log('typeof testObject: ' + typeof testObject);\nconsole.log('testObject properties:');\nfor (var prop in testObject) {\n    console.log('  ' + prop + ': ' + testObject[prop]);\n}\n\n// Put the object into storage\nlocalStorage.setItem('testObject', testObject);\n\n// Retrieve the object from storage\nvar retrievedObject = localStorage.getItem('testObject');\n\nconsole.log('typeof retrievedObject: ' + typeof retrievedObject);\nconsole.log('Value of retrievedObject: ' + retrievedObject);\n</code></pre>\n\n<p>The console output is</p>\n\n<pre><code>typeof testObject: object\ntestObject properties:\n  one: 1\n  two: 2\n  three: 3\ntypeof retrievedObject: string\nValue of retrievedObject: [object Object]\n</code></pre>\n\n<p>It looks to me like the <code>setItem</code> method is converting the input to a string before storing it.</p>\n\n<p>I see this behavior in Safari, Chrome, and Firefox, so I assume it's my misunderstanding of the <a href=\"http://www.w3.org/TR/webstorage/\">HTML5 Web Storage</a> spec, not a browser-specific bug or limitation.</p>\n\n<p>I've tried to make sense of the <em>structured clone</em> algorithm described in <a href=\"http://www.w3.org/TR/html5/infrastructure.html\">http://www.w3.org/TR/html5/infrastructure.html</a>.  I don't fully understand what it's saying, but maybe my problem has to do with my object's properties not being enumerable (???)  </p>\n\n<p>Is there an easy workaround?</p>\n    ",
    "a": "\n<p>Looking at the <a href=\"http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Name-ValueStorage/Name-ValueStorage.html#//apple_ref/doc/uid/TP40007256-CH6-SW1\">Apple</a>, <a href=\"https://developer.mozilla.org/en/DOM/Storage\">Mozilla</a> and <a href=\"http://msdn.microsoft.com/en-us/library/cc197050%28VS.85%29.aspx\">Microsoft</a> documentation, the functionality seems to be limited to handle only string key/value pairs.</p>\n\n<p>A workaround can be to <a href=\"http://www.json.org/js.html\"><em>stringify</em></a> your object before storing it, and later parse it when you retrieve it:</p>\n\n<pre><code>var testObject = { 'one': 1, 'two': 2, 'three': 3 };\n\n// Put the object into storage\nlocalStorage.setItem('testObject', JSON.stringify(testObject));\n\n// Retrieve the object from storage\nvar retrievedObject = localStorage.getItem('testObject');\n\nconsole.log('retrievedObject: ', JSON.parse(retrievedObject));\n</code></pre>\n    "
}, {
    "t": "What is the 'new' keyword in JavaScript?",
    "l": "http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript",
    "q": "\n\n<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>\n\n<ul>\n<li>What is it?</li>\n<li>What problems does it solve?</li>\n<li>When is it appropriate and when not?</li>\n</ul>\n    ",
    "a": "\n<p>It is 4 things:</p>\n\n<ol>\n<li>It creates a new object.  The type of this object, is simply <em>object</em>.</li>\n<li>It sets this new object's internal, inaccessible, <em>[[prototype]]</em> property to be the constructor function's external, accessible, <em>prototype</em> object (every function object automatically has a <em>prototype</em> property).</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-primitive value. In this case, that non-primitive value will be returned.</li>\n</ol>\n\n<p>Note: <em>constructor function</em> refers the function after the <code>new</code> keyword, as in </p>\n\n<pre><code>new constructorFunction(arg1, arg2)\n</code></pre>\n\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object's <em>[[prototype]]</em> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript. </p>\n\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <em>[[prototype]]</em>. It can <em>only</em> be set at object creation time, either with <em>new</em>, with <em>Object.create</em>, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with <em>Object.getPrototypeOf(someObject)</em>. There is <em>no</em> other way to set or read this value.</p>\n\n<p>Functions, in addition to the hidden <em>[[prototype]]</em> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n\n<hr>\n\n<p>Here is an example:</p>\n\n<pre><code>ObjMaker = function() {this.a = 'first';};\n// ObjMaker is just a function, there's nothing special about it that makes \n// it a constructor.\n\nObjMaker.prototype.b = 'second';\n// like all functions, ObjMaker has an accessible prototype property that \n// we can alter. I just added a property called 'b' to it. Like \n// all objects, ObjMaker also has an inaccessible [[prototype]] property\n// that we can't do anything with\n\nobj1 = new ObjMaker();\n// 3 things just happened.\n// A new, empty object was created called obj1.  At first obj1 was the same\n// as {}. The [[prototype]] property of obj1 was then set to the current\n// object value of the ObjMaker.prototype (if ObjMaker.prototype is later\n// assigned a new object value, obj1's [[prototype]] will not change, but you\n// can alter the properties of ObjMaker.prototype to add to both the\n// prototype and [[prototype]]). The ObjMaker function was executed, with\n// obj1 in place of this... so obj1.a was set to 'first'.\n\nobj1.a;\n// returns 'first'\nobj1.b;\n// obj1 doesn't have a property called 'b', so JavaScript checks \n// its [[prototype]]. Its [[prototype]] is the same as ObjMaker.prototype\n// ObjMaker.prototype has a property called 'b' with value 'second'\n// returns 'second'\n</code></pre>\n\n<p>It's like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the 'b' property.</p>\n\n<p>If you want something like a subclass, then you do this:</p>\n\n<pre><code>SubObjMaker = function () {};\nSubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!\n// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype\n// is now set to the object value of ObjMaker.prototype.\n// The modern way to do this is with Object.create(), which was added in ECMAScript 5:\n// SubObjMaker.prototype = Object.create(ObjMaker.prototype);\n\nSubObjMaker.prototype.c = 'third';  \nobj2 = new SubObjMaker();\n// [[prototype]] property of obj2 is now set to SubObjMaker.prototype\n// Remember that the [[prototype]] property of SubObjMaker.prototype\n// is ObjMaker.prototype. So now obj2 has a prototype chain!\n// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype\n\nobj2.c;\n// returns 'third', from SubObjMaker.prototype\n\nobj2.b;\n// returns 'second', from ObjMaker.prototype\n\nobj2.a;\n// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype \n// was created with the ObjMaker function, which assigned a for us\n</code></pre>\n\n<hr>\n\n<p>I read a ton of rubbish on this subject before finally finding <a href=\"http://joost.zeekat.nl/constructors-considered-mildly-confusing.html\">this page</a>, where this is explained very well with nice diagrams.</p>\n    "
}, {
    "t": "Replacing all occurrences of a string in JavaScript",
    "l": "http://stackoverflow.com/questions/1144783/replacing-all-occurrences-of-a-string-in-javascript",
    "q": "\n\n<p>I have this string:</p>\n\n<pre>Test abc test test abc test test\ntest abc test test abc \n</pre>\n\n<p>Doing</p>\n\n<pre><code>str = str.replace('abc', '');\n</code></pre>\n\n<p>seems to only remove the first occurrence of <code>abc</code> in the string above. How can I replace <strong>all</strong> occurrences of it?</p>\n    ",
    "a": "\n<pre><code>str = str.replace(/abc/g, '');\n</code></pre>\n\n<p>In response to comment:</p>\n\n<pre><code>var find = 'abc';\nvar re = new RegExp(find, 'g');\n\nstr = str.replace(re, '');\n</code></pre>\n\n<p>In response to <a href=\"http://stackoverflow.com/users/49153/click-upvote\">Click Upvote</a>'s comment, you could simplify it even more:</p>\n\n<pre><code>function replaceAll(find, replace, str) {\n  return str.replace(new RegExp(find, 'g'), replace);\n}\n</code></pre>\n\n<p><strong>Note:</strong> Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the <code>find</code> function above without pre-processing it to escape those characters.  This is covered in the <a href=\"https://developer.mozilla.org/en-US/\">Mozilla Developer Network</a>'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\">JavaScript Guide on Regular Expressions</a>, where they present the following utility function:</p>\n\n<pre><code>function escapeRegExp(string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n\n<p>So in order to make the <code>replaceAll</code> function above safer, it could be modified to the following if you also include <code>escapeRegExp</code>:</p>\n\n<pre><code>function replaceAll(string, find, replace) {\n  return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n</code></pre>\n    "
}, {
    "t": "Checking if an array key exists in a JavaScript object or array?",
    "l": "http://stackoverflow.com/questions/1098040/checking-if-an-array-key-exists-in-a-javascript-object-or-array",
    "q": "\n\n<p>How do I check if a particular key exists in a JavaScript object or array?</p>\n\n<p>If a key doesn't exist and I try to access it, will it return false? Or throw an error?</p>\n    ",
    "a": "\n<p>Actually, checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually <code>undefined</code>?</p>\n\n<pre><code>var obj = { key: undefined };\nobj[\"key\"] != undefined // false, but the key exists!\n</code></pre>\n\n<p>You should instead use the <code>in</code> operator:</p>\n\n<pre><code>\"key\" in obj // true, regardless of the actual value\n</code></pre>\n\n<p>If you want to check if a key doesn't exist, remember to use parenthesis:</p>\n\n<pre><code>!(\"key\" in obj) // true if \"key\" doesn't exist in object\n!\"key\" in obj   // ERROR!  Equivalent to \"false in obj\"\n</code></pre>\n\n<p>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use <code>hasOwnProperty</code>:</p>\n\n<pre><code>obj.hasOwnProperty(\"key\") // true\n</code></pre>\n    "
}, {
    "t": "Set a default parameter value for a JavaScript function",
    "l": "http://stackoverflow.com/questions/894860/set-a-default-parameter-value-for-a-javascript-function",
    "q": "\n\n<p>I would like a JavaScript function to have optional arguments which I set a default on, which gets used if the value isn't defined.  In ruby you can do it like this:</p>\n\n<pre><code>def read_file(file, delete_after = false)\n  # code\nend\n</code></pre>\n\n<p>Does this work in JavaScript?</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n    ",
    "a": "\n<p>There are a lot of ways, but this is my preferred method - it lets you pass in anything you want, including false or null. (<code>typeof null == \"object\"</code>)</p>\n\n<pre><code> function foo(a, b)\n {\n   a = typeof a !== 'undefined' ? a : 42;\n   b = typeof b !== 'undefined' ? b : 'default_b';\n   ...\n }\n</code></pre>\n    "
}, {
    "t": "How can I refresh a page with jQuery?",
    "l": "http://stackoverflow.com/questions/5404839/how-can-i-refresh-a-page-with-jquery",
    "q": "\n\n<p>How can I refresh a page with jQuery?</p>\n    ",
    "a": "\n<pre><code>$('#something').click(function() {\n    location.reload();\n});\n</code></pre>\n\n<p>Like mplungjan explained in the comment below, the <code>reload()</code> function takes an optional parameter that can be set to <code>true</code> to reload from the server rather than the cache. The parameter defaults to <code>false</code>, so by default the page reloads from the browser's cache.</p>\n    "
}, {
    "t": "Abort Ajax requests using jQuery",
    "l": "http://stackoverflow.com/questions/446594/abort-ajax-requests-using-jquery",
    "q": "\n\n<p>Using jQuery, how can I <strong>cancel/abort an Ajax request</strong> that I have not yet received the response from?</p>\n    ",
    "a": "\n<p>Most of the jQuery Ajax methods return an XMLHttpRequest (or the equivalent) object, so you can just use <code>abort()</code>.</p>\n\n<p>See the documentation:</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms535920%28VS.85%29.aspx\">abort Method</a> (<a href=\"http://en.wikipedia.org/wiki/Microsoft%5fDeveloper%5fNetwork\">MSDN</a>). Cancels the current HTTP request.</li>\n<li><a href=\"https://developer.mozilla.org/en/XMLHttpRequest#abort%28%29\">abort()</a> (<a href=\"http://en.wikipedia.org/wiki/Mozilla%5fDeveloper%5fNetwork\">MDN</a>). If the request has been sent already, this method will abort the request.</li>\n</ul>\n\n\n\n<pre><code>var xhr = $.ajax({\n    type: \"POST\",\n    url: \"some.php\",\n    data: \"name=John&amp;location=Boston\",\n    success: function(msg){\n       alert( \"Data Saved: \" + msg );\n    }\n});\n\n//kill the request\nxhr.abort()\n</code></pre>\n\n<p><strong>UPDATE:</strong>\nAs of jQuery 1.5 the returned object is a wrapper for the native XMLHttpRequest object called jqXHR. This object appears to expose all of the native properties and methods so the above example still works. See <em><a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\">The jqXHR Object</a></em> (jQuery API documentation).</p>\n    "
}, {
    "t": "How to check if a string “StartsWith” another string?",
    "l": "http://stackoverflow.com/questions/646628/how-to-check-if-a-string-startswith-another-string",
    "q": "\n\n<p>How would I write the equivalent of C#'s <a href=\"http://msdn.microsoft.com/en-us/library/baketfxw.aspx\"><code>String.StartsWith</code></a> in Javascript?</p>\n\n<pre><code>var data = 'hello world';\nvar input = 'he';\n\n//data.startsWith(input) == true\n</code></pre>\n    ",
    "a": "\n<p>You can add this function to the <code>String prototype</code>:</p>\n\n<pre><code>if (typeof String.prototype.startsWith != 'function') {\n  // see below for better implementation!\n  String.prototype.startsWith = function (str){\n    return this.indexOf(str) === 0;\n  };\n}\n</code></pre>\n\n<p>Then you can use it directly on string values:</p>\n\n<pre><code>\"Hello World!\".startsWith(\"He\"); // true\n\nvar data = \"Hello world\";\nvar input = 'He';\ndata.startsWith(input); // true\n</code></pre>\n\n<p><strong>Edit:</strong> Note that I'm checking if the function exists before defining it, that's because in the future, the language might have this strings extras methods defined as built-in functions, and native implementations are always faster and preferred, see the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:string_extras\"><em>ECMAScript Harmony String Extras</em></a> proposal.</p>\n\n<p><strong>Edit:</strong> As others noted, <code>indexOf</code> will be inefficient for large strings, its complexity is <code>O(N)</code>. For a constant-time solution (<code>O(1)</code>), you can use either, <code>substring</code> as <a href=\"http://stackoverflow.com/questions/646628/javascript-startswith/646631#646631\">@cobbal</a> suggested, or <code>String.prototype.slice</code>, which behaves similarly (note that I don't recommend using the <code>substr</code>, because it's inconsistent between implementations (most notably on JScript) ):</p>\n\n<pre><code>if (typeof String.prototype.startsWith != 'function') {\n  String.prototype.startsWith = function (str){\n    return this.slice(0, str.length) == str;\n  };\n}\n</code></pre>\n\n<p>The difference between <code>substring</code> and <code>slice</code> is basically that <code>slice</code> can take negative indexes, to manipulate characters from the end of the string, for example you could write the counterpart <code>endsWith</code> method by:</p>\n\n<pre><code>if (typeof String.prototype.endsWith != 'function') {\n  String.prototype.endsWith = function (str){\n    return this.slice(-str.length) == str;\n  };\n}\n</code></pre>\n    "
}, {
    "t": "JavaScript equivalent to printf/string.format",
    "l": "http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format",
    "q": "\n\n<p>I'm looking for a good JavaScript equivalent of the C/PHP <code>printf()</code> or for C#/Java programmers, <code>String.Format()</code> (<code>IFormatProvider</code> for .NET).</p>\n\n<p>My basic requirement is a thousand separator format for numbers for now, but something that handles lots of combinations (including dates) would be good.</p>\n\n<p>I realize Microsoft's <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> library provides a version of <code>String.Format()</code>, but we don't want the entire overhead of that framework.</p>\n    ",
    "a": "\n<p>Try <a href=\"https://github.com/alexei/sprintf.js\">sprintf() for JavaScript</a>.</p>\n\n<hr>\n\n<p><strong>Update</strong>&nbsp;&nbsp;&nbsp;&nbsp;Ok, if you really want to do a simple format method on your own, don’t do the replacements successively but do them simultaneously.</p>\n\n<p>Because most of the other proposals that are mentioned fail when a replace string of previous replacement does also contain a format sequence like this:</p>\n\n<pre><code>\"{0}{1}\".format(\"{1}\", \"{0}\")\n</code></pre>\n\n<p>Normally you would expect the output to be <code>{1}{0}</code> but the actual output is <code>{1}{1}</code>. So do a simultaneously replacement instead like in <a href=\"http://stackoverflow.com/questions/610406/javascript-printf-string-format/4673436#4673436\">fearphage’s suggestion</a>.</p>\n    "
}, {
    "t": "How to detect a click outside an element?",
    "l": "http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element",
    "q": "\n\n<p>I have some HTML menus, which I show completely when a user clicks on the head of these menus. I would like to hide these elements when the user clicks outside the menus' area.</p>\n\n<p>Is something like this possible with jQuery?</p>\n\n<pre><code>$(\"#menuscontainer\").clickOutsideThisElement(function() {\n    // hide the menus\n});\n</code></pre>\n    ",
    "a": "\n<p>Attach a click event to the document body which closes the window. Attach a separate click event to the window which stops propagation to the document body.</p>\n\n<pre><code>$('html').click(function() {\n//Hide the menus if visible\n});\n\n$('#menucontainer').click(function(event){\n    event.stopPropagation();\n});\n</code></pre>\n\n<p>Warning, if using this technique, be aware of <a href=\"http://css-tricks.com/dangers-stopping-event-propagation/\">the dangers of stopping propagation</a>.</p>\n    "
}, {
    "t": "Trim string in JavaScript?",
    "l": "http://stackoverflow.com/questions/498970/trim-string-in-javascript",
    "q": "\n\n<p>How do I trim a string in JavaScript?</p>\n    ",
    "a": "\n<p>Since new Browsers (IE9+) have <code>trim()</code> already implemented, you should only implement <code>trim()</code> if it is not already available on the Prototype-Object (overriding it is a huge performance hit). This is generally recommended when extending Native Objects! Note that the added property is enumerable unless you use ES5 <code>Object.defineProperty</code>!</p>\n\n<p>For those browsers who does not support <code>trim()</code>, you can use this polyfill from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\">MDN</a>:</p>\n\n<pre><code>if (!String.prototype.trim) {\n    (function() {\n        // Make sure we trim BOM and NBSP\n        var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n        String.prototype.trim = function() {\n            return this.replace(rtrim, '');\n        };\n    })();\n}\n</code></pre>\n\n<hr>\n\n<p>See this:</p>\n\n<pre><code>String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, '');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,'');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,'');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');};\n</code></pre>\n    "
}, {
    "t": "Where can I find documentation on formatting a date in JavaScript?",
    "l": "http://stackoverflow.com/questions/1056728/where-can-i-find-documentation-on-formatting-a-date-in-javascript",
    "q": "\n\n<p>I noticed that JavaScript's <code>new Date()</code> function is very smart in accepting dates in several formats.</p>\n\n<pre><code>Xmas95 = new Date(\"25 Dec, 1995 23:15:00\")\nXmas95 = new Date(\"2009 06 12,12:52:39\")\nXmas95 = new Date(\"20 09 2006,12:52:39\")\n</code></pre>\n\n<p>I could not find documentation anywhere showing all the valid string formats while calling <code>new Date()</code> function.</p>\n\n<p>This is for converting a string to a date. If we look at the opposite side, that is, converting a date object to a string, until now I was under the impression that JavaScript doesn't have a built-in API to format a date object into a string.</p>\n\n<blockquote>\n  <p><strong>Editor's note:</strong> The following approach is the asker's attempt that worked on a particular browser but does <em>not</em> work in general; <strong>see the answers on this page</strong> to see some actual solutions.</p>\n</blockquote>\n\n<p>Today, I played with the <code>toString()</code> method on the date object and surprisingly it serves the purpose of formatting date to strings.</p>\n\n<pre><code>var d1 = new Date();\nd1.toString('yyyy-MM-dd');       //Returns \"2009-06-29\" in Internet Explorer, but not Firefox or Chrome\nd1.toString('dddd, MMMM ,yyyy')  //Returns \"Monday, June 29,2009\" in Internet Explorer, but not Firefox or Chrome\n</code></pre>\n\n<p>Also here I couldn't find any documentation on all the ways we can format the date object into a string.</p>\n\n<p>Where is the documentation which lists the format specifiers supported by the <code>Date()</code> object?</p>\n    ",
    "a": "\n<p>I love <em><a href=\"http://www.webdevelopersnotes.com/tips/html/10_ways_to_format_time_and_date_using_javascript.php3\">10 ways to format time and date using JavaScript</a></em> and <em><a href=\"http://www.elated.com/articles/working-with-dates/\">Working with Dates</a></em>.</p>\n\n<p>Basically, you have three methods and you have to combine the strings for yourself:</p>\n\n<pre><code>getDate() // Returns the date\ngetMonth() // Returns the month\ngetFullYear() // Returns the year\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var d = new Date();\n    var curr_date = d.getDate();\n    var curr_month = d.getMonth() + 1; //Months are zero based\n    var curr_year = d.getFullYear();\n    document.write(curr_date + \"-\" + curr_month + \"-\" + curr_year);\n&lt;/script&gt;\n</code></pre>\n    "
}, {
    "t": "Most elegant way to clone a JavaScript object",
    "l": "http://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object",
    "q": "\n\n<p>I have an object <code>x</code>. I'd like to copy it as object <code>y</code>, such that changes to <code>y</code> do not modify <code>x</code>.</p>\n\n<p>What's the most elegant way of doing this in JavaScript?</p>\n\n<p>Edit: I realize that copying objects derived from built-in JavaScript objects will result in extra, unwanted properties. This isn't a problem, since I'm copying one of my own, literal-constructed objects.</p>\n    ",
    "a": "\n<p>To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object's prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a <strong>clone</strong> method to <strong>Object.prototype</strong>, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to <strong>Object.prototype</strong>, or other intermediate prototypes, that you don't know about? In that case, you will copy attributes you shouldn't, so you need to detect unforeseen, non-local attributes with the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty\">hasOwnProperty</a> method.</p>\n\n<p>In addition to non-enumerable attributes, you'll encounter a tougher problem when you try to copy objects that have hidden properties. For example, <strong>prototype</strong> is a hidden property of a function. Also, an object's prototype is referenced with the attribute <strong>__proto__</strong>, which is also hidden, and will not be copied by a for/in loop iterating over the source object's attributes. I think <strong>__proto__</strong> might be specific to Firefox's JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don't know of any way to discover it automatically.</p>\n\n<p>Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is <strong>Object</strong>, then simply creating a new general object with {} will work, but if the source's prototype is some descendant of <strong>Object</strong>, then you are going to be missing the additional members from that prototype which you skipped using the <strong>hasOwnProperty</strong> filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's <strong>constructor</strong> property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\">Date</a> object stores its data as a hidden member:</p>\n\n<pre><code>function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nvar d1 = new Date();\n\n/* Wait for 5 seconds. */\nvar start = (new Date()).getTime();\nwhile ((new Date()).getTime() - start &lt; 5000);\n\n\nvar d2 = clone(d1);\nalert(\"d1 = \" + d1.toString() + \"\\nd2 = \" + d2.toString());\n</code></pre>\n\n<p>The date string for d1 will be 5 seconds behind that of d2. A way to make one Date the same as another is by calling the <strong>setTime</strong> method, but that is specific to the Date class. I don't think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!</p>\n\n<p>When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain <strong>Object</strong>, <strong>Array</strong>, <strong>Date</strong>, <strong>String</strong>, <strong>Number</strong>, or <strong>Boolean</strong>. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in Object or Array would also be one of the 6 simple types in that list. This can be accomplished with code like the following:</p>\n\n<pre><code>function clone(obj) {\n    var copy;\n\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n</code></pre>\n\n<p>The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn't more than one reference to the same data in the object. For example:</p>\n\n<pre><code>// This would be cloneable:\nvar tree = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"right\" : null,\n    \"data\"  : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ndirectedAcyclicGraph[\"right\"] = directedAcyclicGraph[\"left\"];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ncylicGraph[\"right\"] = cylicGraph;\n</code></pre>\n\n<p>It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don't assume that it will just work for anything you throw at it.</p>\n    "
}, {
    "t": "What is the scope of variables in JavaScript?",
    "l": "http://stackoverflow.com/questions/500431/what-is-the-scope-of-variables-in-javascript",
    "q": "\n\n<p>What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?</p>\n    ",
    "a": "\n<p>I think about the best I can do is give you a bunch of examples to study.\nJavascript programmers are practically ranked by how well they understand scope.\nIt can at times be quite counter-intuitive.</p>\n\n<ol>\n<li><p><strong>A globally-scoped variable</strong></p>\n\n<pre><code>var a = 1;\n\n// global scope\nfunction one() {\n  alert(a);\n}\n</code></pre></li>\n<li><p><strong>Local scope</strong></p>\n\n<pre><code>var a = 1;\n\nfunction two(a) {\n  alert(a);\n}\n\n// local scope again\nfunction three() {\n  var a = 3;\n  alert(a);\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>No such thing as block scope in JavaScript</em> (ES5; ES6 introduces <code>let</code>)</p>\n\n<pre><code>var a = 1;\n\nfunction four() {\n  if (true) {\n    var a = 4;\n  }\n\n  alert(a); // alerts '4', not the global value of '1'\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>Object properties</em></p>\n\n<pre><code>var a = 1;\n\nfunction five() {\n  this.a = 5;\n}\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Closure</em></p>\n\n<pre><code>var a = 1;\n\nvar six = (function() {\n  var a = 6;\n\n  return function() {\n    // JavaScript \"closure\" means I have access to 'a' in here,\n    // because it is defined in the function in which I was defined.\n    alert(a);\n  };\n})();\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Prototype-based scope resolution</em></p>\n\n<pre><code>var a = 1;\n\nfunction seven() {\n  this.a = 7;\n}\n\n// [object].prototype.property loses to\n// [object].property in the lookup chain. For example...\n\n// Won't get reached, because 'a' is set in the constructor above.\nseven.prototype.a = -1;\n\n// Will get reached, even though 'b' is NOT set in the constructor.\nseven.prototype.b = 8;\n</code></pre></li>\n<li><p><strong>Altogether</strong></p>\n\n<pre><code>// These will print 1-8\none();\ntwo(2);\nthree();\nfour();\nalert(new five().a);\nsix();\nalert(new seven().a);\nalert(new seven().b);\n</code></pre>\n\n<hr></li>\n<li><p><strong>Global+Local</strong>: <em>An extra complex Case</em></p>\n\n<pre><code>var x = 5;\n\n(function () {\n    console.log(x);\n    var x = 10;\n    console.log(x); \n})();\n</code></pre>\n\n<p>This will print out <code>undefined</code> and <code>10</code> rather than <code>5</code> and <code>10</code> since JavaScript always moves variable declarations (not initializations) to the top of the scope, making the code equivalent to:</p>\n\n<pre><code>var x = 5;\n\n(function () {\n    var x;\n    console.log(x);\n    x = 10;\n    console.log(x); \n})();\n</code></pre></li>\n<li><p><strong>Catch clause-scoped variable</strong></p>\n\n<pre><code>var e = 5;\nconsole.log(e);\ntry {\n    throw 6;\n} catch (e) {\n    console.log(e);\n}\nconsole.log(e);\n</code></pre>\n\n<p>This will print out <code>5</code>, <code>6</code>, <code>5</code>. Inside the catch clause <code>e</code> shadows global and local variables. But this special scope is only for the caught variable. If you write <code>var f;</code> inside the catch clause, then it's exactly the same as if you had defined it before or after the try-catch block.</p></li>\n</ol>\n    "
}, {
    "t": "What is the function of the var keyword and when to use it (or omit it)?",
    "l": "http://stackoverflow.com/questions/1470488/what-is-the-function-of-the-var-keyword-and-when-to-use-it-or-omit-it",
    "q": "\n\n<blockquote>\n  <p><strong><em>NOTE</em></strong><em>: This question was asked from the viewpoint of ECMAScript version 3 or 5. The answers might become outdated with the introduction of new features in the release of ECMAScript 6.</em></p>\n</blockquote>\n\n<p>What exactly is the function of the <code>var</code> keyword in Javascript, and what is the difference between:</p>\n\n<pre><code>var someNumber = 2;\nvar someFunction = function() { doSomething; }\nvar someObject = { }\nvar someObject.someProperty = 5;\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>someNumber = 2;\nsomeFunction = function() { doSomething; }\nsomeObject = { }\nsomeObject.someProperty = 5;\n</code></pre>\n\n<p>When would you use either one, and why/what does it do?</p>\n    ",
    "a": "\n<p>If you're in the global scope then there's no difference.</p>\n\n<p>If you're in a function then <strong><code>var</code></strong> will create a local variable, \"no var\" will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):</p>\n\n<pre><code>// These are both globals\nvar foo = 1;\nbar = 2;\n\nfunction()\n{\n    var foo = 1; // Local\n    bar = 2;     // Global\n\n    // Execute an anonymous function\n    (function()\n    {\n        var wibble = 1; // Local\n        foo = 2; // Inherits from scope above (creating a closure)\n        moo = 3; // Global\n    }())\n}\n</code></pre>\n\n<p>If you're not doing an assignment then you need to use <code>var</code>:</p>\n\n<pre><code>var x; // Declare x\n</code></pre>\n    "
}, {
    "t": "What is the !! (not not) operator in JavaScript?",
    "l": "http://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript",
    "q": "\n\n<p>I saw some code that seems to use an operator I don't recognize, in the form of two exclamation points, like so: <code>!!</code>. Can someone please tell me what this operator does?</p>\n\n<p>The context in which I saw this was,</p>\n\n<pre><code>this.vertical = vertical !== undefined ? !!vertical : this.vertical;\n</code></pre>\n    ",
    "a": "\n<p>Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc.), it will be <code>false</code>, otherwise, <code>true</code>.</p>\n\n<pre><code>!oObject  //Inverted boolean\n!!oObject //Non inverted boolean so true boolean representation\n</code></pre>\n\n<p>So <code>!!</code> is not an operator, it's just the <code>!</code> operator twice.</p>\n    "
}, {
    "t": "Get current URL in JavaScript?",
    "l": "http://stackoverflow.com/questions/406192/get-current-url-in-javascript",
    "q": "\n\n<p>I am using jQuery. How do I get the path of the current URL and assign it to a variable?</p>\n\n<p>Example URL:</p>\n\n<pre><code>http://localhost/menuname.de?foo=bar&amp;amp;number=0\n</code></pre>\n    ",
    "a": "\n<p>To get the path, you can use:</p>\n\n<pre><code>var pathname = window.location.pathname; // Returns path only\nvar url      = window.location.href;     // Returns full URL\n</code></pre>\n    "
}, {
    "t": "Databinding in AngularJS",
    "l": "http://stackoverflow.com/questions/9682092/databinding-in-angularjs",
    "q": "\n\n<p>How does databinding work in the AngularJS framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters? I found that there are <a href=\"http://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example:</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n\n<p>and reflect this change on a view?</p>\n    ",
    "a": "\n<p>AngularJS remembers the value and compares it to previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event. </p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>Syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> — Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> — You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: the comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n    "
}, {
    "t": "Why does ++[[]][+[]]+[+[]] return the string “10”?",
    "l": "http://stackoverflow.com/questions/7202157/why-does-return-the-string-10",
    "q": "\n\n<p>This is valid and returns the string <code>\"10\"</code> in JavaScript (<a href=\"http://sla.ckers.org/forum/read.php?24,33349,33405\">more examples here</a>):</p>\n\n<pre><code>++[[]][+[]]+[+[]]\n</code></pre>\n\n<p>Why? What is happening here?</p>\n    ",
    "a": "\n<p>If we split it up, the mess is equal to:</p>\n\n<pre><code>++[[]][+[]]\n+\n[+[]]\n</code></pre>\n\n<p>In JavaScript, it is true that <code>+[] === 0</code>. <code>+</code> converts something into a number, and in this case it will come down to <code>+\"\"</code> or <code>0</code> (see specification details below).</p>\n\n<p>Therefore, we can simplify it (<code>++</code> has precendence over <code>+</code>):</p>\n\n<pre><code>++[[]][0]\n+\n[0]\n</code></pre>\n\n<p>Because <code>[[]][0]</code> means: get the first element from <code>[[]]</code>, it is true that:</p>\n\n<ul>\n<li><code>[[]][0]</code> returns the inner array (<code>[]</code>). Due to references it's wrong to say <code>[[]][0] === []</code>, but let's call the inner array <code>A</code> to avoid the wrong notation.</li>\n<li><code>++[[]][0] == A + 1</code>, since <code>++</code> means 'increment by one'.</li>\n<li><code>++[[]][0] === +(A + 1)</code>; in other words, it will always be a number (<code>+1</code> does not necessarily return a number, whereas <code>++</code> always does - thanks to Tim Down for pointing this out).</li>\n</ul>\n\n<p>Again, we can simplify the mess into something more legible. Let's substitute <code>[]</code> back for <code>A</code>:</p>\n\n<pre><code>+([] + 1)\n+\n[0]\n</code></pre>\n\n<p>In JavaScript, this is true as well: <code>[] + 1 === \"1\"</code>,  because <code>[] == \"\"</code> (joining an empty array), so:</p>\n\n<ul>\n<li><code>+([] + 1) === +(\"\" + 1)</code>, and</li>\n<li><code>+(\"\" + 1) === +(\"1\")</code>, and</li>\n<li><code>+(\"1\") === 1</code></li>\n</ul>\n\n<p>Let's simplify it even more:</p>\n\n<pre><code>1\n+\n[0]\n</code></pre>\n\n<p>Also, this is true in JavaScript: <code>[0] == \"0\"</code>, because it's joining an array with one element. Joining will concatenate the elements separated by <code>,</code>. With one element, you can deduce that this logic will result in the first element itself.</p>\n\n<p>So, in the end we obtain (number + string = string):</p>\n\n<pre><code>1\n+\n\"0\"\n\n=== \"10\" // Yay!\n</code></pre>\n\n<hr>\n\n<p>Specification details for <code>+[]</code>:</p>\n\n<p>This is quite a maze, but to do <code>+[]</code>, first it is being converted to a string because that's what <code>+</code> says:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Apply the following steps:</p>\n  \n  <ol>\n  <li><p>Let primValue be ToPrimitive(input argument, hint String).</p></li>\n  <li><p>Return ToString(primValue).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToPrimitive()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Return a default value for the Object. The default value of an object is retrieved by calling the [[DefaultValue]] internal method of the object, passing the optional hint PreferredType. The behaviour of the [[DefaultValue]] internal method is defined by this specification for all native ECMAScript objects in 8.12.8.</p>\n</blockquote>\n\n<p><code>[[DefaultValue]]</code> says:</p>\n\n<blockquote>\n  <p>8.12.8 [[DefaultValue]] (hint)</p>\n  \n  <p>When the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".</p></li>\n  <li><p>If IsCallable(toString) is true then,</p></li>\n  </ol>\n  \n  <p>a. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and an empty argument list.</p>\n  \n  <p>b. If str is a primitive value, return str.</p>\n</blockquote>\n\n<p>The <code>.toString</code> of an array says:</p>\n\n<blockquote>\n  <p>15.4.4.2 Array.prototype.toString ( )</p>\n  \n  <p>When the toString method is called, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let array be the result of calling ToObject on the this value.</p></li>\n  <li><p>Let func be the result of calling the [[Get]] internal method of array with argument \"join\".</p></li>\n  <li><p>If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).</p></li>\n  <li><p>Return the result of calling the [[Call]] internal method of func providing array as the this value and an empty arguments list.</p></li>\n  </ol>\n</blockquote>\n\n<p>So <code>+[]</code> comes down to <code>+\"\"</code>, because <code>[].join() === \"\"</code>.</p>\n\n<p>Again, the <code>+</code> is defined as:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber</code> is defined for <code>\"\"</code> as:</p>\n\n<blockquote>\n  <p>The MV of StringNumericLiteral ::: [empty] is 0.</p>\n</blockquote>\n\n<p>So <code>+\"\" === 0</code>, and thus <code>+[] === 0</code>.</p>\n    "
}, {
    "t": "Is Safari on iOS 6 caching $.ajax results?",
    "l": "http://stackoverflow.com/questions/12506897/is-safari-on-ios-6-caching-ajax-results",
    "q": "\n\n<p>Since the upgrade to iOS 6, we are seeing Safari's web view take the liberty of caching <code>$.ajax</code> calls. This is in the context of a PhoneGap application so it is using the Safari WebView. Our <code>$.ajax</code> calls are <code>POST</code> methods and we have cache set to false <code>{cache:false}</code>, but still this is happening. We tried manually adding a <code>TimeStamp</code> to the headers but it did not help.</p>\n\n<p>We did more research and found that Safari is only returning cached results for web services that have a function signature that is static and does not change from call to call.  For instance, imagine a function called something like:</p>\n\n<pre><code>getNewRecordID(intRecordType)\n</code></pre>\n\n<p>This function receives the same input parameters over and over again, but the data it returns should be different every time.</p>\n\n<p>Must be in Apple's haste to make iOS 6 zip along impressively they got too happy with the cache settings.  Has anyone else seen this behavior on iOS 6? If so, what exactly is causing it?</p>\n\n<hr>\n\n<p>The workaround that we found was to modify the function signature to be something like this:</p>\n\n<pre><code>getNewRecordID(intRecordType, strTimestamp)\n</code></pre>\n\n<p>and then always pass in a <code>TimeStamp</code> parameter as well, and just discard that value on the server side.  This works around the issue.  I hope this helps some other poor soul who spends 15 hours on this issue like I did!</p>\n    ",
    "a": "\n<p>After a bit of investigation, turns out that Safari on iOS6 will cache POSTs that have either no Cache-Control headers or even \"Cache-Control: max-age=0\".</p>\n\n<p>The only way I've found of preventing this caching from happening at a global level rather than having to hack random querystrings onto the end of service calls is to set \"Cache-Control: no-cache\".</p>\n\n<p>So:</p>\n\n<ul>\n<li>No Cache-Control or Expires headers = iOS6 Safari will cache</li>\n<li>Cache-Control max-age=0 and an immediate Expires = iOS6 Safari will cache</li>\n<li>Cache-Control: no-cache = iOS6 Safari will NOT cache</li>\n</ul>\n\n<p>I suspect that Apple is taking advantage of this from the HTTP spec in section 9.5 about POST:</p>\n\n<blockquote>\n  <p>Responses to this method are not cacheable, unless the response\n     includes appropriate Cache-Control or Expires header fields. However,\n     the 303 (See Other) response can be used to direct the user agent to\n     retrieve a cacheable resource.</p>\n</blockquote>\n\n<p>So in theory you can cache POST responses...who knew. But no other browser maker has ever thought it would be a good idea until now. But that does NOT account for the caching when no Cache-Control or Expires headers are set, only when there are some set. So it must be a bug.</p>\n\n<p>Below is what I use in the right bit of my Apache config to target the whole of my API because as it happens I don't actually want to cache anything, even gets. What I don't know is how to set this just for POSTs.</p>\n\n<pre><code>Header set Cache-Control \"no-cache\"\n</code></pre>\n\n<p>Update: Just noticed that I didn't point out that it is only when the POST is the same, so change any of the POST data or URL and you're fine. So you can as mentioned elsewhere just add some random data to the URL or a bit of POST data.</p>\n\n<p>Update: You can limit the \"no-cache\" just to POSTs if you wish like this in Apache:</p>\n\n<pre><code>SetEnvIf Request_Method \"POST\" IS_POST\nHeader set Cache-Control \"no-cache\" env=IS_POST\n</code></pre>\n    "
}, {
    "t": "Parse JSON in JavaScript? [duplicate]",
    "l": "http://stackoverflow.com/questions/4935632/parse-json-in-javascript",
    "q": "\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/45015/safely-turning-a-json-string-into-an-object\" dir=\"ltr\">Safely turning a JSON string into an object</a>\n                <span class=\"question-originals-answer-count\">\n                    15 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I want to parse a JSON string in JavaScript. The response is something like</p>\n\n<pre><code>var response = '{\"result\":true,\"count\":1}';\n</code></pre>\n\n<p>How can I get the values <code>result</code> and <code>count</code> from this?</p>\n    ",
    "a": "\n<p>Most browsers support <a href=\"http://msdn.microsoft.com/en-us/library/cc836466%28v=vs.85%29.aspx\"><code>JSON.parse()</code></a>, which is defined in ECMA-262 5th Edition (the specification that JS is based on).  Its usage is simple:</p>\n\n<pre><code>var json = '{\"result\":true,\"count\":1}',\n    obj = JSON.parse(json);\n\nalert(obj.count);\n</code></pre>\n\n<p>For the browsers that don't you can implement it using <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">json2.js</a>.</p>\n\n<p>As noted in the comments, if you're already using jQuery, there is a <code>$.parseJSON</code> function that maps to <code>JSON.parse</code> if available or a form of <code>eval</code> in older browsers. However, this performs additional, unnecessary checks that are also performed by <code>JSON.parse</code>, so for the best all round performance I'd recommend using it like so:</p>\n\n<pre><code>var json = '{\"result\":true,\"count\":1}',\n    obj = JSON &amp;&amp; JSON.parse(json) || $.parseJSON(json);\n</code></pre>\n\n<p>This will ensure you use native <code>JSON.parse</code> immediately, rather than having jQuery perform sanity checks on the string before passing it to the native parsing function.</p>\n    "
}, {
    "t": "Creating multiline strings in JavaScript",
    "l": "http://stackoverflow.com/questions/805107/creating-multiline-strings-in-javascript",
    "q": "\n\n<p>I have the following code in Ruby. I want to convert this code into JavaScript. what's the equivalent code in JS?</p>\n\n<pre><code>text = &lt;&lt;\"HERE\"\nThis\nIs\nA\nMultiline\nString\nHERE\n</code></pre>\n    ",
    "a": "\n<p>Javascript doesn't have a here-document syntax. You can escape the literal newline, however, which comes close:</p>\n\n<pre><code>\"foo \\\nbar\"\n</code></pre>\n    "
}, {
    "t": "When to Use Double or Single Quotes in JavaScript",
    "l": "http://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript",
    "q": "\n\n<p><code>console.log(\"double\");</code> <strong>vs</strong> <code>console.log('single');</code></p>\n\n<p>I see more and more JavaScript libraries out there using single quotes when handling strings. What are the reasons to use one over the other? I thought they're pretty much interchangeable.</p>\n    ",
    "a": "\n<p>I wouldn't say there is a preferred method. You can use either. However, if you are using one form of quote in the string, you might want to use the other as the literal.</p>\n\n<pre><code>alert('Say \"Hello\"');\nalert(\"Say 'Hello'\");\n</code></pre>\n\n<p>The most likely reason is programmer preference / API consistency.</p>\n    "
}, {
    "t": "Modify the URL without reloading the page",
    "l": "http://stackoverflow.com/questions/824349/modify-the-url-without-reloading-the-page",
    "q": "\n\n<p>Is there any way I can modify the URL of the current page without reloading the page?</p>\n\n<p>I would like to access the portion <strong>before</strong> the # hash if possible.</p>\n\n<p>I only need to change the portion <strong>after</strong> the domain, so its not like I'm violating cross-domain policies.</p>\n\n<pre><code> window.location.href = \"www.mysite.com/page2.php\";  // sadly this reloads\n</code></pre>\n    ",
    "a": "\n<p>This can now be done in Chrome, Safari, FF4+, and IE10pp4+!</p>\n\n<p>See this question's answer for more info:\n<a href=\"http://stackoverflow.com/questions/3338642/updating-address-bar-with-new-url-without-hash-or-reloading-the-page\">Updating address bar with new URL without hash or reloading the page</a></p>\n\n<p>Example:</p>\n\n<pre><code> function processAjaxData(response, urlPath){\n     document.getElementById(\"content\").innerHTML = response.html;\n     document.title = response.pageTitle;\n     window.history.pushState({\"html\":response.html,\"pageTitle\":response.pageTitle},\"\", urlPath);\n }\n</code></pre>\n\n<p>You can then use <code>window.onpopstate</code> to detect the back/forward button navigation:</p>\n\n<pre><code>window.onpopstate = function(e){\n    if(e.state){\n        document.getElementById(\"content\").innerHTML = e.state.html;\n        document.title = e.state.pageTitle;\n    }\n};\n</code></pre>\n\n<hr>\n\n<p>For a more in-depth look at manipulating browser history see <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">this MDN article</a>.</p>\n    "
}, {
    "t": "How to check for “undefined” in JavaScript? [duplicate]",
    "l": "http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript",
    "q": "\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/27509/detecting-an-undefined-object-property\" dir=\"ltr\">Detecting an undefined object property</a>\n                <span class=\"question-originals-answer-count\">\n                    29 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>What is the most appropriate way to test if a variable is undefined in JavaScript? I've seen several possible ways:</p>\n\n<pre><code>if (window.myVariable)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (typeof(myVariable) != \"undefined\")\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (myVariable) //This throws an error if undefined. Should this be in Try/Catch?\n</code></pre>\n    ",
    "a": "\n<p>If you are interested in finding out whether a variable has been declared regardless of its value, then using the <code>in</code> operator is the safest way to go. Consider this example.</p>\n\n<pre><code>// global scope\nvar theFu; // theFu has been declared, but its value is undefined\ntypeof theFu; // \"undefined\"\n</code></pre>\n\n<p>But this may not be the intended result for some cases, since the variable or property was declared but just not initialized. Use the <code>in</code> operator for a more robust check.</p>\n\n<pre><code>\"theFu\" in window; // true\n\"theFoo\" in window; // false\n</code></pre>\n\n<p>If you are interested in knowing whether the variable hasn't been declared or has the value <code>undefined</code>, then use the <code>typeof</code> operator.</p>\n\n<pre><code>if (typeof myVar != 'undefined')\n</code></pre>\n\n<p>The <code>typeof</code> operator is guaranteed to return a string. Direct comparisons against <code>undefined</code> are troublesome as <code>undefined</code> can be overwritten. </p>\n\n<pre><code>window.undefined = \"omg\";\n\"omg\" == undefined // true\n</code></pre>\n\n<p>As @CMS pointed out, this has been patched in ECMAScript 5th ed., and <code>undefined</code> is non-writable.</p>\n\n<p><code>if (window.myVar)</code> will also include these falsy values, so it's not very robust:</p>\n\n<pre>false\n0\n\"\"\nNaN\nnull\nundefined\n</pre>\n\n<p>Thanks to @CMS for pointing out that your third case - <code>if (myVariable)</code> can also throw an error in two cases. The first is when the variable hasn't been defined which throws a <code>ReferenceError</code>. </p>\n\n<pre><code>// abc was never declared.\nif (abc) {\n    // ReferenceError: abc is not defined\n} \n</code></pre>\n\n<p>The other case is when the variable has been defined, but has a getter function which throws an error when invoked. For example,</p>\n\n<pre><code>// or it's a property that can throw an error\nObject.defineProperty(window, \"myVariable\", { \n    get: function() { throw new Error(\"W00t?\"); }, \n    set: undefined \n});\nif (myVariable) {\n    // Error: W00t?\n}\n</code></pre>\n    "
}, {
    "t": "Best practice: escape, or encodeURI / encodeURIComponent",
    "l": "http://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent",
    "q": "\n\n<p>When encoding a query string to be sent to a web server - what is the best practice to use from javascript:</p>\n\n<p>Use escape:</p>\n\n<pre><code>escape(\"% +&amp;=\");\n</code></pre>\n\n<p>OR</p>\n\n<p>use encodeURI() / encodeURIComponent()</p>\n\n<pre><code>encodeURI(\"http://www.google.com?var1=value1&amp;var2=value2\");\n\nencodeURIComponent(\"var1=value1&amp;var2=value2\");\n</code></pre>\n    ",
    "a": "\n<h1>escape()</h1>\n\n<p>Don't use it, as it has been deprecated since ECMAScript v3.</p>\n\n<h1>encodeURI()</h1>\n\n<p>Use encodeURI when you want a working URL. Make this call:</p>\n\n<pre><code>encodeURI(\"http://www.google.com/a file with spaces.html\")\n</code></pre>\n\n<p>to get:</p>\n\n<pre>http://www.google.com/a%20file%20with%20spaces.html\n</pre>\n\n<p>Don't call encodeURIComponent since it would destroy the URL and return</p>\n\n<pre>http%3A%2F%2Fwww.google.com%2Fa%20file%20with%20spaces.html\n</pre>\n\n<h1>encodeURIComponent()</h1>\n\n<p>Use encodeURIComponent when you want to encode a URL parameter.</p>\n\n<pre><code>param1 = encodeURIComponent(\"http://xyz.com/?a=12&amp;b=55\")\n</code></pre>\n\n<p>Then you may create the URL you need:</p>\n\n<pre><code>url = \"http://domain.com/?param1=\" + param1 + \"&amp;param2=99\";\n</code></pre>\n\n<p>And you will get this complete URL:</p>\n\n<p><code>http://www.domain.com/?param1=http%3A%2F%2Fxyz.com%2F%Ffa%3D12%26b%3D55&amp;param2=99</code></p>\n\n<p>Note that encodeURIComponent does not escape the ' character. A common bug is to use it to create html attributes such as <code>href='MyUrl'</code>, which could suffer an injection bug. If you are constructing html from strings, either use \" instead of ' for attribute quotes, or add an extra layer of encoding (' can be encoded as %27).</p>\n\n<p>For more information on this type of encoding you can check: <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">http://en.wikipedia.org/wiki/Percent-encoding</a></p>\n    "
}, {
    "t": "Enums in JavaScript?",
    "l": "http://stackoverflow.com/questions/287903/enums-in-javascript",
    "q": "\n\n<p>What is the preferred syntax for defining enums in JavaScript? Something like:</p>\n\n<pre><code>my.namespace.ColorEnum = {\n    RED : 0,\n    GREEN : 1,\n    BLUE : 2\n}\n\n// later on\n\nif(currentColor == my.namespace.ColorEnum.RED) {\n   // whatever\n}\n</code></pre>\n\n<p>Or is there a more preferable idiom?</p>\n    ",
    "a": "\n<p>This isn't much of an answer, but I'd say that works just fine, personally</p>\n\n<p>Having said that, since it doesn't matter what the values are (you've used 0, 1, 2), I'd use a meaningful string in case you ever wanted to output the current value.</p>\n    "
}, {
    "t": "JavaScript closure inside loops – simple practical example",
    "l": "http://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example",
    "q": "\n\n<p>Closures are one of those things that have been discussed a lot on SO, but this situation pops up a lot for me and I'm always left scratching my head.</p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>It outputs this:</p>\n\n<blockquote>\n  <p>My value: 3<br>\n  My value: 3<br>\n  My value: 3</p>\n</blockquote>\n\n<p>Whereas I'd like it to output:</p>\n\n<blockquote>\n  <p>My value: 0<br>\n  My value: 1<br>\n  My value: 2</p>\n</blockquote>\n\n<p>What's the solution to this basic problem?</p>\n    ",
    "a": "\n<p>Well, the problem is that the variable i, within each of your anonymous functions, is bound to the same variable outside of the function.</p>\n\n<p>What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:</p>\n\n<pre><code>var funcs = [];\n\nfunction createfunc(i) {\n    return function() { console.log(\"My value: \" + i); };\n}\n\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = createfunc(i);\n}\n\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of \"i\" remains as you intended.</p>\n\n<hr>\n\n<p><strong>Update:</strong> with the relatively widespread availability of the <code>Array.prototype.forEach</code> function (in 2015), it's worth noting that in those situations involving iteration primarily over an array of values, <code>.forEach()</code> provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you've got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:</p>\n\n<pre><code>var someArray = [ /* whatever */ ];\n// ...\nsomeArray.forEach(function(arrayElement) {\n  // ... code code code for this one element\n  someAsynchronousFunction(arrayElement, function() {\n    arrayElement.doSomething();\n  });\n});\n</code></pre>\n\n<p>The idea is that each invocation of the callback function used with the <code>.forEach</code> loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it's used in an asynchronous callback, it won't collide with any of the other callbacks established at other steps of the iteration.</p>\n\n<p>If you happen to be working in jQuery, the <code>$.each()</code> function gives you a similar capability.</p>\n\n<p><strong>Update 2:</strong>\nECMAScript 6 (ES6), the newest version of JavaScript, is now starting to be implemented in many evergreen browsers and backend systems. There are also transpilers like <a href=\"http://babeljs.io/\">Babel</a> that will convert ES6 to ES5 to allow usage of new features on older systems.</p>\n\n<p>ES6 introduces new <code>let</code> and <code>const</code> keywords that are scoped differently than <code>var</code>-based variables. For example, in a loop with a <code>let</code>-based index, each iteration through the loop will have a new value of <code>i</code> where each value is scoped inside the loop, so your code would work as you expect. There are many resources, but I'd recommend <a href=\"http://www.2ality.com/2015/02/es6-scoping.html\">2ality's block-scoping post</a> as a great source of information.</p>\n\n<pre><code>for (let i = 0; i &lt; 3; i++) {\n    funcs[i] = function() {\n        console.log(\"My value: \" + i);\n    };\n}\n</code></pre>\n    "
}, {
    "t": "Length of a JavaScript object (that is, associative array)",
    "l": "http://stackoverflow.com/questions/5223/length-of-a-javascript-object-that-is-associative-array",
    "q": "\n\n<p>If I have a JavaScript associative array, say:</p>\n\n<pre><code>var myArray = new Object();\nmyArray[\"firstname\"] = \"Gareth\";\nmyArray[\"lastname\"] = \"Simpson\";\nmyArray[\"age\"] = 21;\n</code></pre>\n\n<p>Is there a built-in or accepted best practice way to get the length of this array?</p>\n\n<p>JavaScript does not have associative arrays -- it only has objects, <em>which can be used as a notion of associative arrays</em>.**</p>\n    ",
    "a": "\n<p>The most robust answer (i.e. that captures the intent of what you're trying to do while causing the fewest bugs) would be:</p>\n\n<pre><code>Object.size = function(obj) {\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\n// Get the size of an object\nvar size = Object.size(myArray);\n</code></pre>\n\n<p>There's a sort of convention in JavaScript that you <a href=\"http://stackoverflow.com/questions/10757455/object-prototype-is-verboten\">don't add things to Object.prototype</a>, because it can break enumerations in various libraries. Adding methods to Object is usually safe, though.</p>\n    "
}, {
    "t": "Convert JavaScript String to be all lower case?",
    "l": "http://stackoverflow.com/questions/154862/convert-javascript-string-to-be-all-lower-case",
    "q": "\n\n<p>How can I convert a JavaScript string value to be in all lower case letters?</p>\n\n<p>Example: \"Your Name\" to \"your name\"</p>\n    ",
    "a": "\n<pre><code>\"Your Name\".toLowerCase();\n</code></pre>\n    "
}, {
    "t": "Why is using “for…in” with array iteration such a bad idea?",
    "l": "http://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea",
    "q": "\n\n<p>I've been told not to use \"for...in\" with arrays in JavaScript. Why not?</p>\n    ",
    "a": "\n<p>The reason is that one construct...</p>\n\n<pre><code>var a = [];\na[5] = 5; // Perfectly legal JavaScript that resizes the array.\n\nfor (var i=0; i&lt;a.length; i++) {\n    // Iterates over numeric indexes from 0 to 5, as everyone expects.\n}\n</code></pre>\n\n<p>can sometimes be totally different from the other...</p>\n\n<pre><code>var a = [];\na[5] = 5;\nfor (var x in a) {\n    // Shows only the explicitly set index of \"5\", and ignores 0-4\n}\n</code></pre>\n\n<p>Also consider that <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> libraries might do things like this, which will affect any array you create:</p>\n\n<pre><code>// Somewhere deep in your JavaScript library...\nArray.prototype.foo = 1;\n\n// Now you have no idea what the below code will do.\nvar a = [1,2,3,4,5];\nfor (var x in a){\n    // Now foo is a part of EVERY array and \n    // will show up here as a value of 'x'.\n}\n</code></pre>\n    "
}, {
    "t": "Check if object is array?",
    "l": "http://stackoverflow.com/questions/4775722/check-if-object-is-array",
    "q": "\n\n<p>I'm trying to write a function that either accepts a list of strings, or a single string. If it's a string, then I want to convert it to an array with just the one item. Then I can loop over it without fear of an error. </p>\n\n<p>So how do I check if the variable is an array?</p>\n\n<hr>\n\n<p>I've rounded up the various solutions below and created a <a href=\"http://jsperf.com/js-isarray-comparison\">jsperf test</a>.</p>\n    ",
    "a": "\n<p>The method given in the ECMAScript standard to find the class of Object is to use the <code>toString</code> method from <code>Object.prototype</code>.</p>\n\n<pre><code>if( Object.prototype.toString.call( someVar ) === '[object Array]' ) {\n    alert( 'Array!' );\n}\n</code></pre>\n\n<p>Or you could use <code>typeof</code> to test if it is a String:</p>\n\n<pre><code>if( typeof someVar === 'string' ) {\n    someVar = [ someVar ];\n}\n</code></pre>\n\n<p>Or if you're not concerned about performance, you could just do a <code>concat</code> to a new empty Array.</p>\n\n<pre><code>someVar = [].concat( someVar );\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> Check out a <a href=\"http://blog.niftysnippets.org/2010/09/say-what.html\">thorough treatment</a> from <a href=\"http://stackoverflow.com/users/157247/t-j-crowder\">@T.J. Crowder's</a> blog, as posted in his comment below.</p>\n    "
}, {
    "t": "How to move an element into another element?",
    "l": "http://stackoverflow.com/questions/1279957/how-to-move-an-element-into-another-element",
    "q": "\n\n<p>I would like to move one DIV element inside another. For example, I want to move this (including all children):</p>\n\n<pre><code>&lt;div id=\"source\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>into this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>so that I have this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n  &lt;div id=\"source\"&gt;\n    ...\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n    ",
    "a": "\n<p>You may want to use the <a href=\"http://api.jquery.com/appendTo/\"><code>appendTo</code></a> function (which adds to the end of the element):</p>\n\n<pre><code>$(\"#source\")\n    .appendTo(\"#destination\");\n</code></pre>\n\n<p>Alternatively you could use the <a href=\"http://api.jquery.com/prependTo/\"><code>prependTo</code></a> function (which adds to the beginning of the element):</p>\n\n<pre><code>$(\"#source\")\n    .prependTo(\"#destination\");\n</code></pre>\n    "
}, {
    "t": "Serializing to JSON in jQuery",
    "l": "http://stackoverflow.com/questions/191881/serializing-to-json-in-jquery",
    "q": "\n\n<p>I need to serialize an object to JSON. I'm using jQuery. Is there a \"standard\" way to do this?</p>\n\n<p>My specific situation: I have an array defined something like this:</p>\n\n<pre><code>var countries = new Array();\ncountries[0] = 'ga';\ncountries[1] = 'cd';\n...\n</code></pre>\n\n<p>and I need to turn this into a string to pass to <code>$.ajax()</code> like this:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: \"Concessions.aspx/GetConcessions\",\n    data: \"{'countries':['ga','cd']}\",\n...\n</code></pre>\n    ",
    "a": "\n<p><a href=\"https://github.com/douglascrockford/JSON-js\">JSON-js</a> - JSON in JavaScript.</p>\n\n<p>To convert an object to a string, use <code>JSON.stringify</code>:</p>\n\n<pre><code>var json_text = JSON.stringify(your_object, null, 2);\n</code></pre>\n\n<p>To convert a JSON string to object, use <code>JSON.parse</code>:</p>\n\n<pre><code>var your_object = JSON.parse(json_text);\n</code></pre>\n\n<p>It was recently recommended by <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\">John Resig</a>:</p>\n\n<blockquote>\n  <p>...PLEASE start migrating\n  your JSON-using applications over to\n  Crockford's json2.js. It is fully\n  compatible with the ECMAScript 5\n  specification and gracefully degrades\n  if a native (faster!) implementation\n  exists.</p>\n  \n  <p>In fact, I just landed a change in jQuery yesterday that utilizes the\n  JSON.parse method if it exists, now\n  that it has been completely specified.</p>\n</blockquote>\n\n<p>I tend to trust what he says on JavaScript matters :)</p>\n\n<p><a href=\"http://caniuse.com/json\">Newer browsers</a> support the <a href=\"http://ecma262-5.com/ELS5_Section_15.htm#Section_15.12\">JSON object</a> natively. The current version of Crockford's JSON library will only define <code>JSON.stringify</code> and <code>JSON.parse</code> if they're not already defined, leaving any browser native implementation intact.</p>\n    "
}, {
    "t": "How does Trello access the user's clipboard?",
    "l": "http://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard",
    "q": "\n\n<p>When you hover over a card in <a href=\"http://en.wikipedia.org/wiki/Trello\">Trello</a> and press <kbd>Ctrl</kbd>+<kbd>C</kbd>, the URL of this card is copied to the clipboard. How do they do this?</p>\n\n<p>As far as I can tell, there is no Flash movie involved. I've got <a href=\"http://en.wikipedia.org/wiki/Flashblock\">Flashblock</a> installed, and the Firefox network tab shows no Flash movie loaded. (That's the usual method, for example, by ZeroClipboard.)</p>\n\n<p>How do they achieve this magic?</p>\n\n<p>(Right at this moment I think I had an epiphany: You cannot select text on the page, so I assume they have an invisible element, where they create a text selection via JavaScript code, and <kbd>Ctrl</kbd>+<kbd>C</kbd> triggers the browser's default behaviour, copying that invisible node's text value.)</p>\n    ",
    "a": "\n<p><strong>Disclosure:</strong> <a href=\"https://trello.com/daniel\">I wrote the code that Trello uses</a>; the code below is the actual source code Trello uses to accomplish the clipboard trick.</p>\n\n<hr>\n\n<p>We don't actually \"access the user's clipboard\", instead we help the user out a bit by selecting something useful when they press <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n\n<p>Sounds like you've figured it out; we take advantage of the fact that when you want to hit <kbd>Ctrl</kbd>+<kbd>C</kbd>, you have to hit the <kbd>Ctrl</kbd> key first.  When the <kbd>Ctrl</kbd> key is pressed, we pop in a textarea that contains the text we want to end up on the clipboard, and select all the text in it, so the selection is all set when the <kbd>C</kbd> key is hit.  (Then we hide the textarea when the <kbd>Ctrl</kbd> key comes up)</p>\n\n<p>Specifically, Trello does this:</p>\n\n<pre><code>TrelloClipboard = new class\n  constructor: -&gt;\n    @value = \"\"\n\n    $(document).keydown (e) =&gt;\n      # Only do this if there's something to be put on the clipboard, and it\n      # looks like they're starting a copy shortcut\n      if !@value || !(e.ctrlKey || e.metaKey)\n        return\n\n      if $(e.target).is(\"input:visible,textarea:visible\")\n        return\n\n      # Abort if it looks like they've selected some text (maybe they're trying\n      # to copy out a bit of the description or something)\n      if window.getSelection?()?.toString()\n        return\n\n      if document.selection?.createRange().text\n        return\n\n      _.defer =&gt;\n        $clipboardContainer = $(\"#clipboard-container\")\n        $clipboardContainer.empty().show()\n        $(\"&lt;textarea id='clipboard'&gt;&lt;/textarea&gt;\")\n        .val(@value)\n        .appendTo($clipboardContainer)\n        .focus()\n        .select()\n\n    $(document).keyup (e) -&gt;\n      if $(e.target).is(\"#clipboard\")\n        $(\"#clipboard-container\").empty().hide()\n\n  set: (@value) -&gt;\n</code></pre>\n\n<p>In the DOM we've got</p>\n\n<pre><code>&lt;div id=\"clipboard-container\"&gt;&lt;textarea id=\"clipboard\"&gt;&lt;/textarea&gt;&lt;/div&gt;\n</code></pre>\n\n<p>CSS for the clipboard stuff:</p>\n\n<pre><code>#clipboard-container {\n  position: fixed;\n  left: 0px;\n  top: 0px;\n  width: 0px;\n  height: 0px;\n  z-index: 100;\n  display: none;\n  opacity: 0;\n}\n#clipboard {\n  width: 1px;\n  height: 1px;       \n  padding: 0px;\n}\n</code></pre>\n\n<p>... and the CSS makes it so you can't actually see the textarea when it pops in ... but it's \"visible\" enough to copy from.</p>\n\n<p>When you hover over a card, it calls</p>\n\n<pre><code>TrelloClipboard.set(cardUrl)\n</code></pre>\n\n<p>... so then the clipboard helper knows what to select when the <kbd>Ctrl</kbd> key is pressed.</p>\n    "
}, {
    "t": "jQuery get specific option tag text",
    "l": "http://stackoverflow.com/questions/196684/jquery-get-specific-option-tag-text",
    "q": "\n\n<p>All right, say I have this:</p>\n\n<pre><code>&lt;select id='list'&gt;\n    &lt;option value='1'&gt;Option A&lt;/option&gt;\n    &lt;option value='2'&gt;Option B&lt;/option&gt;\n    &lt;option value='3'&gt;Option C&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>What would the selector look like if I wanted to get \"Option B\" when I have the value '2'?</p>\n\n<p>Please note that this is not asking how to get the <em>selected</em> text value, but just any one of them, whether selected or not, depending on the value attribute. I tried:</p>\n\n<pre><code>$(\"#list[value='2']\").text();\n</code></pre>\n\n<p>But it is not working.</p>\n    ",
    "a": "\n<p>It's looking for an element with id <code>list</code> which has a property <code>value</code> equal to 2. What you want is the <code>option</code> child of the <code>list</code>.</p>\n\n<pre><code>$(\"#list option[value='2']\").text()\n</code></pre>\n    "
}, {
    "t": "How can I convert a string to boolean in JavaScript?",
    "l": "http://stackoverflow.com/questions/263965/how-can-i-convert-a-string-to-boolean-in-javascript",
    "q": "\n\n<p>Can I convert a string representing a boolean value (e.g., 'true', 'false') into a intrinsic type in JavaScript?</p>\n\n<p>I have a hidden form in HTML that is updated based upon a user's selection within a list. This form contains some fields which represent boolean values and are dynamically populated with an intrinsic boolean value. However, once this value is placed into the hidden input field it becomes a string.</p>\n\n<p>The only way I could find to determine the field's boolean value, once it was converted into a string, was to depend upon the literal value of its string representation.</p>\n\n<pre><code>var myValue = document.myForm.IS_TRUE.value;\nvar isTrueSet = myValue == 'true';\n</code></pre>\n\n<p>Is there a better way to accomplish this?</p>\n    ",
    "a": "\n<p>You should probably <strong>be cautious about using these two methods</strong> for your specific needs:</p>\n\n<pre><code>var myBool = Boolean(\"false\");  // == true\n\nvar myBool = !!\"false\";  // == true\n</code></pre>\n\n<p>Any string which isn't the empty string will evaluate to <code>true</code> by using them. Although they're the cleanest methods I can think of concerning to boolean conversion, I think they're not what you're looking for.</p>\n\n<p>About the way you suggested, you could make it stricter by using the identity operator (<code>===</code>), which doesn't make any implicit type conversions when the compared variables have different types, instead of the equality operator (<code>==</code>), which does:</p>\n\n<pre><code>var isTrueSet = (myValue === 'true');\n</code></pre>\n    "
}, {
    "t": "Difference between == and === in JavaScript [duplicate]",
    "l": "http://stackoverflow.com/questions/523643/difference-between-and-in-javascript",
    "q": "\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/359494/javascript-vs-does-it-matter-which-equal-operator-i-use\">Javascript === vs == : Does it matter which “equal” operator I use?</a>   </p>\n</blockquote>\n\n\n\n<p>What is the difference between <code>==</code> and <code>===</code> in JavaScript?  I have also seen <code>!=</code> and <code>!==</code> operators.  Are there more such operators?</p>\n    ",
    "a": "\n<p><code>===</code> and <code>!==</code> are strict comparison operators:</p>\n\n<blockquote>\n  <p>JavaScript has both strict and\n  type-converting equality comparison.\n  For strict equality the objects being\n  compared must have the same type and:</p>\n  \n  <ul>\n  <li>Two strings are strictly equal when they have the same sequence of\n  characters, same length, and same\n  characters in corresponding positions.</li>\n  <li>Two numbers are strictly equal when they are numerically equal (have\n  the same number value). NaN is not\n  equal to anything, including NaN.\n  Positive and negative zeros are equal\n  to one another.</li>\n  <li>Two Boolean operands are strictly equal if both are true or\n  both are false.</li>\n  <li>Two objects are strictly equal if they refer to the same Object.</li>\n  <li>Null and Undefined types are == (but not ===). [I.e. Null==Undefined (but not Null===Undefined)]</li>\n  </ul>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\">Comparison Operators - MDC</a></p>\n    "
}, {
    "t": "Loop through JavaScript object",
    "l": "http://stackoverflow.com/questions/684672/loop-through-javascript-object",
    "q": "\n\n<p>I have a JavaScript object like the following:</p>\n\n<pre><code> var p =\n    {\n        \"p1\": \"value1\",\n        \"p2\": \"value2\",\n        \"p3\": \"value3\"\n    };\n</code></pre>\n\n<p>Now I want to loop through all <code>p</code> elements (<code>p1</code>,<code>p2</code>,<code>p3</code>...) and get their keys and values. How can I do that? I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using <code>eval</code>.</p>\n    ",
    "a": "\n<p>You can use the for-in loop as shown by others. However, you also want to make sure that the key you get is an actual property of an object, and doesn't come from the prototype:</p>\n\n<pre><code>for (var key in p) {\n  if (p.hasOwnProperty(key)) {\n    alert(key + \" -&gt; \" + p[key]);\n  }\n}\n</code></pre>\n    "
}, {
    "t": "Why does parseInt(1/0, 19) return 18?",
    "l": "http://stackoverflow.com/questions/11340673/why-does-parseint1-0-19-return-18",
    "q": "\n\n<p>I've an annoying problem in JavaScript.</p>\n\n<pre><code>parseInt(1 / 0, 19)\n18\n</code></pre>\n\n<p>Why does <code>parseInt</code> return <code>18</code>?</p>\n    ",
    "a": "\n<p>The result of <code>1/0</code> is <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt</code></a> treats its first argument as a string which means first of all <code>Infinity.toString()</code> is called, producing the string <code>\"Infinity\"</code>. So it works the same as if you asked it to convert <code>\"Infinity\"</code> in base 19 to decimal.</p>\n\n<p>Here are the digits in base 19 along with their decimal values:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Base 19   Base 10 (decimal)\n---------------------------\n   0            0\n   1            1\n   2            2\n   3            3\n   4            4\n   5            5\n   6            6\n   7            7\n   8            8\n   9            9\n   a            10\n   b            11\n   c            12\n   d            13\n   e            14\n   f            15\n   g            16\n   h            17\n   i            18\n</code></pre>\n\n<p>What happens next is that <code>parseInt</code> scans the input <code>\"Infinity\"</code> to find which part of it can be parsed and stops after accepting the first <code>I</code> (because <code>n</code> is not a valid digit in base 19).</p>\n\n<p>Therefore it behaves as if you called <code>parseInt(\"I\", 19)</code>, which converts to decimal 18 by the table above.</p>\n    "
}, {
    "t": "Insert Item into Array at a Specific Index",
    "l": "http://stackoverflow.com/questions/586182/insert-item-into-array-at-a-specific-index",
    "q": "\n\n<p>I am looking for a JavaScript array insert method, in the style of:</p>\n\n<pre><code>arr.insert(index, item)\n</code></pre>\n\n<p>Preferably in jQuery, but any JavaScript implementation will do at this point because I can't believe the trouble I'm having finding such a basic function! Thanks for your help.</p>\n    ",
    "a": "\n<p>What you want is the <strong><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a></strong> function on the native array object.</p>\n\n<p><code>arr.splice(index, 0, item);</code> will insert <code>item</code> into <code>arr</code> at the specified index.</p>\n\n<p>In this example we will create an array and add an element to it into index 2:</p>\n\n<pre><code>var arr = [];\narr[0] = \"Jani\";\narr[1] = \"Hege\";\narr[2] = \"Stale\";\narr[3] = \"Kai Jim\";\narr[4] = \"Borge\";\n\nconsole.log(arr.join());\narr.splice(2, 0, \"Lene\");\nconsole.log(arr.join());\n</code></pre>\n\n<p>The output of the code above will be:</p>\n\n<pre><code>Jani,Hege,Stale,Kai Jim,Borge\nJani,Hege,Lene,Stale,Kai Jim,Borge\n</code></pre>\n    "
}, {
    "t": "JavaScript unit test tools for TDD",
    "l": "http://stackoverflow.com/questions/300855/javascript-unit-test-tools-for-tdd",
    "q": "\n\n<p>I've looked into and considered many JavaScript unit tests and testing tools, but have been unable to find a suitable option to remain fully TDD compliant. So, is there a JavaScript unit test tool that is fully TDD compliant?</p>\n    ",
    "a": "\n<h2><a href=\"http://karma-runner.github.io\">Karma</a> or <a href=\"http://angular.github.io/protractor/#/\">Protractor</a></h2>\n\n<p>Karma is a JavaScript test-runner built with Node.js, and meant for unit testing.</p>\n\n<p>Protractor is for end-to-end testing, and uses Selenium Web Driver to drive tests.</p>\n\n<p>Both have been made by the Angular team. You can use any assertion-library you want with either.</p>\n\n<p>Screencast: <a href=\"http://www.youtube.com/watch?v=MVw8N3hTfCI\">Karma Getting started</a></p>\n\n<p><strong>related</strong>:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/21732379/should-i-be-using-protractor-or-karma-for-my-end-to-end-testing/21733114#21733114\">Should I be using Protractor or Karma for my end-to-end testing?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/17070522/can-protractor-and-karma-be-used-together\">Can Protractor and Karma be used together?</a></li>\n</ul>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Uses node.js, so compatible with Win/OS X/Linux</li>\n<li>Run tests from browser or headless with PhantomJS</li>\n<li>Run on multiple clients at once</li>\n<li>Option to launch, capture, and automatically shutdown browsers</li>\n<li>Option to run server/clients on development computer or separately</li>\n<li>Run tests from command line (can be integrated in ant/maven)</li>\n<li>Write tests xUnit or BDD style</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Auto-run tests on save</li>\n<li>Proxies requests cross-domain</li>\n<li>Possible to customize:\n<ul>\n<li>Extend it to wrap other test-frameworks (Jasmine, Mocha, QUnit built-in)</li>\n<li>Your own assertions/refutes</li>\n<li>Reporters</li>\n<li>Browser Launchers</li>\n</ul></li>\n<li>Plugin for WebStorm</li>\n<li>Supported by Netbeans IDE</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Does not supports NodeJS testing</li>\n<li>No plugin for Eclipse (yet)</li>\n<li>No history of previous test results </li>\n</ul>\n\n<h2><a href=\"http://busterjs.org/\">Buster.js</a></h2>\n\n<p>A JavaScript test-runner built with Node.js. Very modular and flexible. It comes with it's own assertion library, but you can add your own if you like. The <a href=\"http://docs.busterjs.org/en/latest/modules/referee/\">assertions library</a> is decoupled, so you can also use it with other test-runners. Instead of using <code>assert(!...)</code> or <code>expect(...).not...</code>, it uses <code>refute(...)</code> which is a nice twist imho.</p>\n\n<blockquote>\n  <p>A browser JavaScript testing toolkit. It does browser testing with browser automation (think JsTestDriver), qunit style static html page testing, testing in headless browsers (phantomjs, jsdom, ...), and more. Take a look at <a href=\"http://docs.busterjs.org/en/latest/overview/\">the overview</a>!</p>\n  \n  <p>A Node.js testing toolkit. You get the same test case library, assertion library, etc. This is also great for hybrid browser and Node.js code. Write your test case with Buster.JS and run it both in Node.js and in a real browser.</p>\n</blockquote>\n\n<p>Screencast: <a href=\"http://www.youtube.com/watch?v=VSFGAl1BekY\">Buster.js Getting started</a> (2:45)</p>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Uses node.js, so compatible with Win/OS X/Linux</li>\n<li>Run tests from browser or headless with PhantomJS (soon)</li>\n<li>Run on multiple clients at once</li>\n<li>Supports NodeJS testing</li>\n<li>Don't need to run server/clients on development computer (no need for IE)</li>\n<li>Run tests from command line (can be integrated in ant/maven)</li>\n<li>Write tests xUnit or BDD style</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Defer tests instead of commenting them out</li>\n<li>SinonJS built in</li>\n<li><a href=\"http://www.youtube.com/watch?v=gKVej9SAzH4\">Auto-run tests on save</a></li>\n<li>Proxies requests cross-domain</li>\n<li>Possible to customize:\n<ul>\n<li>Extend it to wrap other test-frameworks (JsTestDriver built in)</li>\n<li>Your own assertions/refutes</li>\n<li>Reporters (xunit XML, traditional dots, specification, tap, teamcity and more built in)</li>\n<li>Customize/replace the HTML that is used to run the browser-tests</li>\n</ul></li>\n<li>TextMate and Emacs integration</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Stil in beta, so can be buggy</li>\n<li>No plugin for Eclipse/IntelliJ (yet)</li>\n<li>Doesn't group results by os/browser/version like TestSwarm *. It does however print out the browser name and version in the test results.</li>\n<li>No history of previous test results like TestSwarm *</li>\n<li>Doesn't fully work on windows <a href=\"http://docs.busterjs.org/en/latest/developers/windows/\">as of May 2014</a></li>\n</ul>\n\n<p>* TestSwarm is also a Continuous Integration server, while you need a separate CI server for Buster.js. It does however output xUnit XML reports, so it should be easy to integrate with <a href=\"http://hudson-ci.org/\">Hudson</a>, <a href=\"http://www.atlassian.com/software/bamboo/overview\">Bamboo</a> or other CI servers.</p>\n\n<h2><a href=\"https://github.com/jquery/testswarm/\">TestSwarm</a></h2>\n\n<p>John Resig (jQuery) has created a tool for distributed JavaScript testing, TestSwarm. Mainly for open source JavaScript projects, but TestSwarm is open source, so you can set up a server yourself for corporate testing. Although this might require that you to do some modifications.</p>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Continuous integration server for JavaScript</li>\n<li>Supports all major browsers/operating systems</li>\n<li>Run on multiple clients at once</li>\n<li>Don't need to run server/clients on development computer (no need for IE)</li>\n<li>Automatic run tests on all clients when you commit something (or whenever you modify the script to run the tests)</li>\n<li>Show history of test results pr commit</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Have test results for OS and browser versions</li>\n<li>Crowdsource to test in a multitude of browsers</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Can not break your build through ant/maven</li>\n<li>Don't notice the test fail before commit</li>\n<li>No IDEplug-in</li>\n</ul>\n\n<p><a href=\"http://ejohn.org/blog/javascript-testing-does-not-scale/\">http://ejohn.org/blog/javascript-testing-does-not-scale/</a></p>\n\n<p>TestSwarm architecture:</p>\n\n<p><img src=\"http://ejohn.org/files/ts-swarm.png\" alt=\"alt text\"></p>\n\n<h2><a href=\"http://www.browserswarm.com/\">BrowserSwarm</a></h2>\n\n<p>BrowserSwarm is a project from appendTo, Sauce Labs and the Internet Explorer team. It is essentially a hosted forked version of TestSwarm. </p>\n\n<p>In addition to all the advantages to TestSwarm, BrowserSwarm already has all the browsers connected to the swarm and ready to test your code, therefore not requiring you to add clients yourself or maintaining installations of browsers. Time is also saved from the hassle of setting up and configuring TestSwarm. </p>\n\n<h2><a href=\"https://github.com/pivotal/jasmine/\">Jasmine</a></h2>\n\n<p><img src=\"http://i.stack.imgur.com/q4Bct.png\" alt=\"Jasmine\"></p>\n\n<p>This is a client-side test-runner that might interest developers familiar with Ruby or Ruby on Rails. The syntax is based on <a href=\"http://rspec.info/\">RSpec</a> that's used for testing in Rails projects.</p>\n\n<blockquote>\n  <p>Jasmine is a behavior-driven development framework for testing your JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM.</p>\n</blockquote>\n\n<p>If you have experience with this test-runner, please contribute with more info :)</p>\n\n<p>Project home: <a href=\"https://github.com/pivotal/jasmine/\">http://jasmine.github.io/</a></p>\n\n<h2><a href=\"http://qunitjs.com/\">QUnit</a></h2>\n\n<p>QUnit focuses on testing JavaScript in the browser, while providing as much convenience to the developer as possible. Blurb from the site:</p>\n\n<blockquote>\n  <p>QUnit is a powerful, easy-to-use JavaScript unit test suite. It's used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code</p>\n</blockquote>\n\n<p>QUnit shares some history with TestSwarm (above):</p>\n\n<blockquote>\n  <p>QUnit was originally developed by John Resig as part of jQuery. In 2008 it got its own home, name and API documentation, allowing others to use it for their unit testing as well. At the time it still dependended on jQuery. A rewrite in 2009 fixed that, now QUnit runs completelty standalone.\n  QUnit's assertion methods follow the CommonJS Unit Testing specification, which was to some degree influenced by QUnit.</p>\n</blockquote>\n\n<p>Project home: <a href=\"http://qunitjs.com/\">http://qunitjs.com/</a></p>\n\n<h2><a href=\"http://sinonjs.org\">Sinon</a></h2>\n\n<p>Another great tool is <a href=\"http://sinonjs.org\">sinon.js</a> by Christian Johansen, the author of <a href=\"http://tddjs.com/\">Test-Driven JavaScript Development</a>. Best described by himself:</p>\n\n<blockquote>\n  <p>Standalone test spies, stubs and mocks\n  for JavaScript. No dependencies, works\n  with any unit testing framework.</p>\n</blockquote>\n\n<h2><a href=\"http://theintern.io\">Intern</a></h2>\n\n<p>The <a href=\"http://theintern.io/#compare\">Intern Web site</a> provides a direct feature comparison to the other testing frameworks on this list. It offers more features out of the box than any other JavaScript-based testing system.</p>\n\n<h2><a href=\"http://mochajs.org\">mocha.js</a></h2>\n\n<p>I'm totally unqualified to comment on mocha.js's features, strengths, and weaknesses,\nbut it was just recommended to me by someone I trust in the JS community.</p>\n\n<p>List of features, as reported by its web site:</p>\n\n<ul>\n<li>browser support</li>\n<li>simple async support, including promises</li>\n<li>test coverage reporting</li>\n<li>string diff support</li>\n<li>javascript API for running tests</li>\n<li>proper exit status for CI support etc</li>\n<li>auto-detects and disables coloring for non-ttys</li>\n<li>maps uncaught exceptions to the correct test case</li>\n<li>async test timeout support</li>\n<li>test-specific timeouts</li>\n<li>growl notification support</li>\n<li>reports test durations</li>\n<li>highlights slow tests</li>\n<li>file watcher support</li>\n<li>global variable leak detection</li>\n<li>optionally run tests that match a regexp</li>\n<li>auto-exit to prevent \"hanging\" with an active loop</li>\n<li>easily meta-generate suites &amp; test-cases</li>\n<li>mocha.opts file support</li>\n<li>clickable suite titles to filter test execution</li>\n<li>node debugger support</li>\n<li>detects multiple calls to done()</li>\n<li>use any assertion library you want</li>\n<li>extensible reporting, bundled with 9+ reporters</li>\n<li>extensible test DSLs or \"interfaces\"</li>\n<li>before, after, before each, after each hooks</li>\n<li>arbitrary transpiler support (coffee-script etc)</li>\n<li>TextMate bundle</li>\n</ul>\n\n<h2><a href=\"http://www.yolpo.com\">yolpo</a></h2>\n\n<p><img src=\"http://i.imgur.com/5HKEWSW.png\" alt=\"yolpo\"></p>\n\n<p>Yolpo is a tool to visualize the execution of javascript. Javascript API developers are encouraged to write their use cases to show and tell their api. Such use cases forms the basis of regression tests.</p>\n    "
}, {
    "t": "JavaScript post request like a form submit",
    "l": "http://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit",
    "q": "\n\n<p>I'm trying to direct a browser to a different page. If I wanted a GET request, I could say</p>\n\n<pre><code>document.location.href = 'http://example.com/?q=a';\n</code></pre>\n\n<p>But the resource I'm trying to access won't respond properly unless I use a POST request. If this were not dynamically generated, I might use the HTML</p>\n\n<pre><code>&lt;form action=\"http://example.com/\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"q\" value=\"a\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Then I would just submit the form from the DOM.</p>\n\n<p>But really I would like JavaScript code that allows me to say</p>\n\n<pre><code>post_to_url('http://example.com/', {'q':'a'});\n</code></pre>\n\n<p>What's the best cross browser implementation?</p>\n\n<p><strong>Edit</strong> </p>\n\n<p>I'm sorry I was not clear. I need a solution that changes the location of the browser, just like submitting a form. If this is possible with <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a>, it is not obvious. And this should not be asynchronous, nor use XML, so Ajax is not the answer.</p>\n    ",
    "a": "\n<pre><code>function post(path, params, method) {\n    method = method || \"post\"; // Set method to post by default if not specified.\n\n    // The rest of this code assumes you are not using a library.\n    // It can be made less wordy if you use one.\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"method\", method);\n    form.setAttribute(\"action\", path);\n\n    for(var key in params) {\n        if(params.hasOwnProperty(key)) {\n            var hiddenField = document.createElement(\"input\");\n            hiddenField.setAttribute(\"type\", \"hidden\");\n            hiddenField.setAttribute(\"name\", key);\n            hiddenField.setAttribute(\"value\", params[key]);\n\n            form.appendChild(hiddenField);\n         }\n    }\n\n    document.body.appendChild(form);\n    form.submit();\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>post('/contact/', {name: 'Johnny Bravo'});\n</code></pre>\n\n<p><strong>EDIT</strong>: Since this has gotten upvoted so much, I'm guessing people will be copy-pasting this a lot. So I added the <code>hasOwnProperty</code> check to fix any inadvertent bugs.</p>\n    "
}, {
    "t": "endsWith in javascript",
    "l": "http://stackoverflow.com/questions/280634/endswith-in-javascript",
    "q": "\n\n<p>How can I check if a string ends with a particular character in javascript?\nExample I have a string say </p>\n\n<pre><code>var str = \"mystring#\";\n</code></pre>\n\n<p>I want to know if that string str is ending with <code>#</code>. How can I check it?</p>\n\n<ol>\n<li><p>Is there a <code>endsWith()</code> method in javascript?</p></li>\n<li><p>One solution I have is take the length of the string and get the last character and check it.</p></li>\n</ol>\n\n<p>Is this the best way or there is any other way?</p>\n    ",
    "a": "\n<p>I know this is a year old question... but I need this too and I need it to work cross-browser so... <strong>combining everyone's answer and comments</strong> and simplifying it a bit:</p>\n\n<pre><code>String.prototype.endsWith = function(suffix) {\n    return this.indexOf(suffix, this.length - suffix.length) !== -1;\n};\n</code></pre>\n\n<ul>\n<li>Doesn't create a substring</li>\n<li>Uses native <code>indexOf</code> function for fastest results</li>\n<li>Skip unnecessary comparisons using the second parameter of <code>indexOf</code> to skip ahead</li>\n<li>Works in Internet Explorer</li>\n<li>NO Regex complications</li>\n</ul>\n\n<hr>\n\n<p>Also, if you don't like stuffing things in native data structure's prototypes, here's a standalone version:</p>\n\n<pre><code>function endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> As noted by @hamish in the comments, if you want to err on the safe side and check if an implementation has already been provided, you can just adds a <code>typeof</code> check like so:</p>\n\n<pre><code>if (typeof String.prototype.endsWith !== 'function') {\n    String.prototype.endsWith = function(suffix) {\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\n    };\n}\n</code></pre>\n    "
}, {
    "t": "How to debug Node.js applications",
    "l": "http://stackoverflow.com/questions/1911015/how-to-debug-node-js-applications",
    "q": "\n\n<p>How do I debug a Node.js server application? Right now I'm mostly using <em>alert debugging</em> with print statements like this:</p>\n\n<pre><code>sys.puts(sys.inspect(someVariable));\n</code></pre>\n\n<p>There must be a better way to debug. I know that <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Google Chrome</a> has a command-line debugger. Is this debugger available for Node.js as well?</p>\n    ",
    "a": "\n<p>The <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\">V8</a> debugger released as part of the Google <a href=\"http://code.google.com/p/chromedevtools/\">Chrome Developer Tools</a> can be used to debug Node.js scripts. A detailed explanation of how this works can be found in the <a href=\"https://github.com/joyent/node/wiki/Using-Eclipse-as-Node-Applications-Debugger\">Node.js GitHub wiki</a>.</p>\n\n<p><strike>There is also <a href=\"http://github.com/smtlaissezfaire/ndb\">ndb</a>, a command line debugger written in Node.js itself.</strike></p>\n    "
}, {
    "t": "How can I merge properties of two JavaScript objects dynamically?",
    "l": "http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically",
    "q": "\n\n<p>I need to be able to merge two (very simple) JavaScript objects at runtime.  For example I'd like to:</p>\n\n<pre><code>var obj1 = { food: 'pizza', car: 'ford' }\nvar obj2 = { animal: 'dog' }\n\nobj1.merge(obj2);\n\n//obj1 now has three properties: food, car, and animal\n</code></pre>\n\n<p>Does anyone have a script for this or know of a built in way to do this?  I do not need recursion, and I do not need to merge functions, just methods on flat objects.</p>\n    ",
    "a": "\n<pre><code>for (var attrname in obj2) { obj1[attrname] = obj2[attrname]; }\n</code></pre>\n\n<p>Note that this will simply add all attributes of <code>obj2</code> to <code>obj1</code> which might not be what you want if you still want to use the unmodified <code>obj1</code>.</p>\n\n<p>If you're using a framework that craps all over your prototypes then you have to get fancier with checks like <code>hasOwnProperty</code>, but that code will work for 99% of cases.</p>\n\n<p>Example function:</p>\n\n<pre><code>/**\n * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nfunction merge_options(obj1,obj2){\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n}\n</code></pre>\n    "
}, {
    "t": "What is the best way to add options to a select from an array with jQuery?",
    "l": "http://stackoverflow.com/questions/170986/what-is-the-best-way-to-add-options-to-a-select-from-an-array-with-jquery",
    "q": "\n\n<p>What is the best method for adding options to a select from a JSON object using jQuery?</p>\n\n<p>I'm looking for something that I don't need a plugin to do, but would also be interested in the plugins that are out there.</p>\n\n<p>This is what I did:</p>\n\n<pre><code>selectValues = { \"1\": \"test 1\", \"2\": \"test 2\" };\n\nfor (key in selectValues) {\n  if (typeof (selectValues[key] == 'string') {\n    $('#mySelect').append('&lt;option value=\"' + key + '\"&gt;' + selectValues[key] + '&lt;/option&gt;');\n  }\n}\n</code></pre>\n\n<p><strong>A clean/simple solution:</strong></p>\n\n<p>This is a cleaned up and simplified <a href=\"http://stackoverflow.com/questions/170986/what-is-the-best-way-to-add-options-to-a-select-from-an-array-with-jquery/171007#171007\">version of matdumsa's</a>:</p>\n\n<pre><code>$.each(selectValues, function(key, value) {   \n     $('#mySelect')\n          .append($('&lt;option&gt;', { value : key })\n          .text(value)); \n});\n</code></pre>\n\n<p>Changes from matdumsa's: (1) removed the close tag for the option inside append() and (2) moved the properties/attributes into an map as the second parameter of append().</p>\n    ",
    "a": "\n<p>Same as other answers, in jQuery fashion:</p>\n\n<pre><code>$.each(selectValues, function(key, value) {   \n     $('#mySelect')\n         .append($(\"&lt;option&gt;&lt;/option&gt;\")\n         .attr(\"value\",key)\n         .text(value)); \n});\n</code></pre>\n    "
}, {
    "t": "$(document).ready equivalent without jQuery",
    "l": "http://stackoverflow.com/questions/799981/document-ready-equivalent-without-jquery",
    "q": "\n\n<p>I have a script that uses <code>$(document).ready</code>, but doesn't use anything else from jQuery. I'd like to lighten it up by removing the jQuery dependency.</p>\n\n<p>How can I implement my own <code>$(document).ready</code> functionality without using jQuery? I know that  using <code>window.onload</code> will not be the same, as <code>window.onload</code> fires after all images, frames etc have been loaded.</p>\n    ",
    "a": "\n<p>There is a standards based replacement,<code>DOMContentLoaded</code> that is supported by over <a href=\"http://caniuse.com/#search=DOMContentLoaded\">90%+ of browsers</a>, though not IE8:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n  //do work\n});\n</code></pre>\n\n<p>jQuery's native function is much more complicated than just window.onload, as depicted below.  </p>\n\n<pre><code>function bindReady(){\n    if ( readyBound ) return;\n    readyBound = true;\n\n    // Mozilla, Opera and webkit nightlies currently support this event\n    if ( document.addEventListener ) {\n        // Use the handy event callback\n        document.addEventListener( \"DOMContentLoaded\", function(){\n            document.removeEventListener( \"DOMContentLoaded\", arguments.callee, false );\n            jQuery.ready();\n        }, false );\n\n    // If IE event model is used\n    } else if ( document.attachEvent ) {\n        // ensure firing before onload,\n        // maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", function(){\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", arguments.callee );\n                jQuery.ready();\n            }\n        });\n\n        // If IE and not an iframe\n        // continually check to see if the document is ready\n        if ( document.documentElement.doScroll &amp;&amp; window == window.top ) (function(){\n            if ( jQuery.isReady ) return;\n\n            try {\n                // If IE is used, use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                document.documentElement.doScroll(\"left\");\n            } catch( error ) {\n                setTimeout( arguments.callee, 0 );\n                return;\n            }\n\n            // and execute any waiting functions\n            jQuery.ready();\n        })();\n    }\n\n    // A fallback to window.onload, that will always work\n    jQuery.event.add( window, \"load\", jQuery.ready );\n}\n</code></pre>\n    "
}, {
    "t": "JavaScript Array Delete Elements",
    "l": "http://stackoverflow.com/questions/500606/javascript-array-delete-elements",
    "q": "\n\n<p>What is the difference between using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/delete\">the <code>delete</code> operator</a> on the array element as opposed to using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\">the <code>Array.splice</code> method</a>? For example: </p>\n\n<pre><code>myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[1];\n//  or\nmyArray.splice (1, 1);\n</code></pre>\n\n<p>Why even have the splice method if I can delete array elements like I can with objects?</p>\n    ",
    "a": "\n<p>Delete in this case will only set the element as undefined:</p>\n\n<pre><code>&gt; myArray = ['a', 'b', 'c', 'd']\n  [\"a\", \"b\", \"c\", \"d\"]\n&gt; delete myArray[0]\n  true\n&gt; myArray\n  [undefined, \"b\", \"c\", \"d\"]\n</code></pre>\n\n<p>Splice actually removes the element from the array:</p>\n\n<pre><code>&gt; myArray = ['a', 'b', 'c', 'd']\n  [\"a\", \"b\", \"c\", \"d\"]\n&gt; myArray.splice(0, 2)\n  [\"a\", \"b\"]\n&gt; myArray\n  [\"c\", \"d\"]\n</code></pre>\n    "
}, {
    "t": "How to get current date in JavaScript?",
    "l": "http://stackoverflow.com/questions/1531093/how-to-get-current-date-in-javascript",
    "q": "\n\n<p>How do I get current date in JavaScript?</p>\n    ",
    "a": "\n<p>Hendrik's answer in the comments above will work but probably isn't what you are looking for. The format is not very usable. </p>\n\n<p>I have been having the same issue and have come up with this through a lot of searching. </p>\n\n<pre><code>var today = new Date();\nvar dd = today.getDate();\nvar mm = today.getMonth()+1; //January is 0!\nvar yyyy = today.getFullYear();\n\nif(dd&lt;10) {\n    dd='0'+dd\n} \n\nif(mm&lt;10) {\n    mm='0'+mm\n} \n\ntoday = mm+'/'+dd+'/'+yyyy;\ndocument.write(today);\n</code></pre>\n\n<p>It's quite complex but it will give you today's date in the format of mm/dd/yyyy.</p>\n\n<p>Simply change <code>today = mm+'/'+dd+'/'+yyyy;</code> to what ever format you wish.</p>\n    "
}, {
    "t": "Open a URL in a new tab using JavaScript",
    "l": "http://stackoverflow.com/questions/4907843/open-a-url-in-a-new-tab-using-javascript",
    "q": "\n\n<p>I'm trying to open a <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> in a new tab, as opposed to a popup window. I've seen related questions where the responses would look something like:</p>\n\n<pre><code>window.open(url,'_blank');\nwindow.open(url);\n</code></pre>\n\n<p>But none of them worked for me, the browser still tried to open a popup window.</p>\n    ",
    "a": "\n<p>Nothing an author can do can choose to open in a new tab instead of a new window.</p>\n\n<p>CSS3 proposed <a href=\"http://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target-new\">target-new</a>, but <a href=\"http://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/\">the specification was abandoned</a>.</p>\n    "
}, {
    "t": "Why don't self-closing script tags work?",
    "l": "http://stackoverflow.com/questions/69913/why-dont-self-closing-script-tags-work",
    "q": "\n\n<p>What is the reason browsers do not correctly recognize:</p>\n\n<pre><code>&lt;script src=\"foobar.js\" /&gt; &lt;!-- self-closing script tag --&gt;\n</code></pre>\n\n<p>Only this is recognized:</p>\n\n<pre><code>&lt;script src=\"foobar.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Does this break the concept of XHTML support?</p>\n\n<p>Note: This statement is correct at least for all IE (6-8 beta 2).</p>\n    ",
    "a": "\n<p>XHTML 1 specification says:</p>\n\n<p><a href=\"http://www.w3.org/TR/xhtml1/#C_3\">С.3. Element Minimization and Empty Element Content</a></p>\n\n<blockquote>\n  <p>Given an empty instance of an element whose content model is not <code>EMPTY</code> (for example, an empty title or paragraph) do not use the minimized form (e.g. use <code>&lt;p&gt; &lt;/p&gt;</code> and not <code>&lt;p /&gt;</code>).</p>\n</blockquote>\n\n<p><a href=\"http://www.w3.org/TR/xhtml1/dtds.html#a_dtd_XHTML-1.0-Strict\">XHTML DTD</a> specifies script tags as:</p>\n\n<pre><code>&lt;!-- script statements, which may include CDATA sections --&gt;\n&lt;!ELEMENT script (#PCDATA)&gt;\n</code></pre>\n    "
}, {
    "t": "How do you check if a variable is an array in JavaScript? [duplicate]",
    "l": "http://stackoverflow.com/questions/767486/how-do-you-check-if-a-variable-is-an-array-in-javascript",
    "q": "\n\n<div class=\"question-status question-originals-of-duplicate\">\n    <p>This question already has an answer here:</p>\n    <ul>\n        <li>\n            <a href=\"/questions/4775722/check-if-object-is-array\" dir=\"ltr\">Check if object is array?</a>\n                <span class=\"question-originals-answer-count\">\n                    25 answers\n                </span>\n        </li>\n    </ul>\n</div>\n<p>I would like to check whether a variable is either an array or a single value in JavaScript.</p>\n\n<p>I have found a possible solution...</p>\n\n<pre><code>if (variable.constructor == Array)...\n</code></pre>\n\n<p>Is this the best way this can be done?</p>\n    ",
    "a": "\n<p>There are several ways of checking if an variable is an array or not. The best solution is the one you have chosen.</p>\n\n<pre><code>variable.constructor === Array\n</code></pre>\n\n<p>This is the fastest method on Chrome, and most likely all other browsers. All arrays are objects, so checking the constructor property is a fast process for javascript engines.</p>\n\n<p>If you are having issues with finding out if an objects property is an array, you must first check if the property is there.</p>\n\n<pre><code>variable.prop &amp;&amp; variable.prop.constructor === Array\n</code></pre>\n\n<p>Some other ways are:</p>\n\n<pre><code>variable instanceof Array\n</code></pre>\n\n<p>This method runs about a 1/3rd the speed as the first example. Still pretty solid, looks cleaner, if you're all about pretty code and not so much on performance.</p>\n\n<pre><code>Array.isArray(variable)\n</code></pre>\n\n<p>This last one is, in my opinion the ugliest, and it is the slowest. Running about 1/5th the speed as the first example. Array.prototype, is actually an array. you can read more about it here <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a></p>\n\n<p>Also, I ran some test upon jsperf.com <a href=\"http://jsperf.com/instanceof-array-vs-array-isarray\">http://jsperf.com/instanceof-array-vs-array-isarray</a> so have some fun and check it out.</p>\n    "
}, {
    "t": "How to pass command line arguments to Node.js?",
    "l": "http://stackoverflow.com/questions/4351521/how-to-pass-command-line-arguments-to-node-js",
    "q": "\n\n<p>I have a web server written in <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> that I would like to launch with a specific folder. I'm not sure how to access arguments in JavaScript. I'm running node like this</p>\n\n<pre><code>$ node server.js folder\n</code></pre>\n\n<p>Where <code>server.js</code> is my code. Node.js help says this is possible:</p>\n\n<pre><code>$ node -h\nUsage: node [options] script.js [arguments]\n</code></pre>\n\n<p>How would I access those arguments in JavaScript? Somehow I was not able to find this information on the web.</p>\n    ",
    "a": "\n<h1>Standard Method (no library)</h1>\n\n<p>The arguments are stored in <code>process.argv</code></p>\n\n<p>Here is the specification form <a href=\"http://nodejs.org/docs/latest/api/process.html#process_process_argv\">http://nodejs.org/docs/latest/api/process.html#process_process_argv</a></p>\n\n<p><code>process.argv</code> is an array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.</p>\n\n<pre><code>// print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + ': ' + val);\n});\n</code></pre>\n\n<p>This will generate:</p>\n\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</code></pre>\n    "
}]